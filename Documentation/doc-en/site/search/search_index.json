{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EcclesiaCRM documentation","text":""},{"location":"#crm","title":"CRM","text":"<p>EcclesiaCRM is a CRM (Customer Relationship Management).</p> <p></p>"},{"location":"#overview","title":"Overview","text":"<p>EcclesiaCRM is based on ChurchCRM which itself was based on InfoCentral.</p> <p>The software has been developed by a team of volunteers for the purpose of making available a software of quality for churches. If you want to discover more about it or help developing the app, you can go on github.com.</p>"},{"location":"#where-to-start-on-ecclesiacrm","title":"Where to start on EcclesiaCRM ?","text":"<p>If you have some experience on Web Applications, then start on EcclesiaCRM will be easy. Otherwise, there is some pre-requisite to have, as a matter of fact it is relevant to emphasize that Ecclesia CRM is an app based on the Internet, implying that : The \"server\", which is distant from EcclesiaCRm and will keep for you the files and infos you will need.</p> <p>The \"client\", which interacts from a web browser to the distant app.</p> <p>There is only one server, but an infinite number of users.</p>"},{"location":"#installation","title":"Installation","text":"<p>Ecclesia is an PHP/MySQL app running on a server, which supplies on web pages that will provide the data given by a data base, which would then be available for the users. However, you will see the main advantage of the app when you will be several to work together and from a distance on this app.</p>"},{"location":"#if-you-need-help","title":"If you need help","text":"<p>To have help on EcclesiaCRM, click on issues.</p>"},{"location":"#get-off-to-the-right-start","title":"Get off to the right start","text":"<p>The app is based on the idea that the members of a family or a group have the same interests.</p> <p>After downloading the app and the first connection, you will  be ready to configure the app so it suits your needs.</p> <p>The first thing to do will be to enter the name of the church, its address, its phone number and the mail address in Files.</p> <p>EcclesiaCRM will display \"My church\" in bold in the upper headband.</p> <p>During the configuration, ask yourself in which ways do you want to use EcclesiaCRM :</p> <ol> <li>Which groups do you need ?</li> <li>Which characteristics do you want to link with a member ?</li> <li>Do you need customizable characteristics ?</li> <li>Who is the administrator ?</li> <li>Who will deal with the app's financial aspects ?</li> <li>Who can add or change the records ?</li> </ol>"},{"location":"about/about/","title":"Participe in EcclesiaCRM","text":""},{"location":"about/about/#to-participate-in-the-project-ecclesiacrm","title":"To participate in the project EcclesiaCRM.","text":"<p>The project relies on the volunteer contributors the users of open source. If you want to participate, you can : </p> <ul> <li>Send Patch Code via pul requests</li> <li>Update the documentation</li> <li>Send reports of the bugs or propose some improvements for the CRM  </li> </ul>"},{"location":"about/about/#first-step","title":"First step:","text":"<ol> <li>Read the whole page</li> <li>Make yourself known via our Chat</li> <li>Visit the part \"report an issue\", it was made to be as easy as possible in order to send the bug's report. </li> <li>Have fun! </li> </ol>"},{"location":"about/about/#test-a-division","title":"Test a division","text":"<p>As long as one develops the software, one needs testing. </p> <p>Set up a test </p> <p>There are a few ways to test the software: </p> <ol> <li>Oracle Virtual Box</li> <li>Oracle VirtualBox provides a free virtual machine</li> <li>wmware</li> <li>wmware is a professional tool providing tests in an optimal way</li> <li>Hyper-V</li> <li>Hyper-V is a free Windows 10 role that runs a Web Linux server </li> </ol>"},{"location":"about/about/#test-ecclesiacrm","title":"Test EcclesiaCRM","text":"<ol> <li>Check the division that you want to test. You can use GitHub Deskop, which you can download freely on the GitHub page, or you can use one of the link below:  </li> <li>It can happens that we test some parts on experimental division </li> <li>If you download a Zip file, you should retrieve it in \"file\"</li> <li>Via a command line, browse to the file</li> <li>Wait until the message: EcclesiaCRM is now Hosted Wait until the message: </li> <li>Then, test the functionality </li> <li>Finally, send your request on \"Issues\"</li> </ol>"},{"location":"about/about/#how-to-report-an-issue","title":"How to report an issue","text":"<p>When reporting an issue, please include as much detail as you can. Let us know your platform and EcclesiaCRM version. If the problem is visual (for example a theme or design issue) please add a screenshot; and if you get an error please include the full error and traceback.</p>"},{"location":"about/about/#which-environment-are-we-using","title":"Which environment are we using ?","text":"<p>We work on an docker environment</p>"},{"location":"about/about/#to-enter-tests","title":"To enter tests","text":"<p>[To test if your request was send] (https://github.com/EcclesiaCRM/CRM/issues/13)</p>"},{"location":"about/about/#submit-a-pull-requests","title":"Submit a Pull Requests","text":"<p>Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For all change requests, documentation and unit tests will be required for acceptance.</p>"},{"location":"user-guide/doc-admin/doc-settings/doc-settings-integration/","title":"Integration","text":"<p>Here you can set the integration settings for other apps</p> <ul> <li>MailChimp</li> <li>The tools to integrate the external calendar of EcclesiaCRM.</li> <li>The DAV's external management</li> </ul>"},{"location":"user-guide/doc-admin/doc-settings/doc-settings-integration/#how-to-access-it","title":"How to access it ?","text":"<p>Go to:</p> <p></p> <p>Then select : \"Int\u00e9gration\"</p> <p></p> <p>There are a few potential poles, which are made clear by the bubbles</p>"},{"location":"user-guide/doc-admin/doc-settings/doc-settings-integration/#mailchimp-benableddavwebbrowser-imailchimpapimaxmemberscount","title":"MailChimp : \"bEnabledDavWebBrowser\" &amp; \"iMailChimpApiMaxMembersCount\"","text":"<p>MailChimp is used for direct mail and is integrated to EcclesiaCRM. Go to the link below to obtain a free activation key</p> <p>MailChimp</p> <p>Once you got the key you can enter it in: bEnabledDavWebBrowser</p> <p> Note  MailChimp can have issues when there are too many users on the diffusion list. One can specify a maximum number of person at iMailChimpApiMaxMembersCount.</p>"},{"location":"user-guide/doc-admin/doc-settings/doc-settings-integration/#solpurl-solpusername-solppassword","title":"sOLPURL &amp; sOLPUserName &amp; sOLPPassword","text":"<p>These settings are used for OpenLP, a form of presenting for churches (like PowerPoint).</p>"},{"location":"user-guide/doc-admin/doc-settings/doc-settings-integration/#benableddav-benableddavwebbrowser","title":"bEnabledDav &amp;&amp; bEnabledDavWebBrowser","text":"<p>These settings enable the management of the external access via a link to Api checking on sabre.io About the protocols: WebDav like NextCloud or Owncloud, CalDav to manage the calendars, and CardDav to manage the address books.</p> <p>bEnabledDav enable the complete deactivation of  Dav (WebDav, CalDav et CardDav)</p> <p>bEnabledDavWebBrowser is activated: all accesses are to be made as follows:</p> <ul> <li> <p>For the files system  : https://url_de_la_web_application/server.php</p> </li> <li> <p>For the calendars: https://url_de_la_web_application/calendarserver.php</p> </li> <li> <p>For the address books: https://url_de_la_web_application/addressbookserver.php</p> </li> </ul>"},{"location":"user-guide/doc-admin/doc-tips/doc-restauration-bdd-bug/","title":"Bug after database restauration","text":"<p>Here you can set the integration settings for other apps </p> <ol> <li> <p>In some cases after the data recovery one may have a note about <code>email_list</code> or <code>email_count</code>, it is recommend to delete the two tables entries in the data base.</p> </li> <li> <p>In the case of <code>Mail-&gt;MailChimp-&gt;Tableau de bord-&gt;Email en doublon</code>, if there is an issue to extract the duplicates: </p> <ul> <li> <p>This bug happens after the transfer of a data base from one server to another </p> </li> <li> <p>The solution is to apply this patch on the data base : </p> </li> </ul> </li> </ol> <pre><code>-- drop view in case of existence\nDROP VIEW IF EXISTS `email_list`;\nDROP VIEW IF EXISTS  `email_count`;\n\n-- method for dup emails\nCREATE VIEW email_list AS\n    SELECT fam_Email AS email, 'family' AS type, fam_id AS id FROM family_fam WHERE fam_email IS NOT NULL AND fam_email != ''\n    UNION\n    SELECT per_email AS email, 'person_home' AS type, per_id AS id FROM person_per WHERE per_email IS NOT NULL AND per_email != ''\n    UNION\n    SELECT per_WorkEmail AS email, 'person_work' AS type, per_id AS id FROM person_per WHERE per_WorkEmail IS NOT NULL AND per_WorkEmail != '';\n\nCREATE VIEW email_count AS\n    SELECT email, COUNT(*) AS total FROM email_list group by email;\n</code></pre>"},{"location":"user-guide/doc-admin/family/doc-create-family-auto/","title":"Self-register families","text":"<p>You can ask the families to enroll themselves as well as theirs members</p>"},{"location":"user-guide/doc-admin/family/doc-create-family-auto/#activate-the-self-registration","title":"Activate the self-registration","text":"<ul> <li>Go to settings</li> </ul> <ul> <li>Go to \"family administration\"</li> </ul> <ul> <li>Activate : \"bEnableSelfRegistration\"</li> </ul> <ul> <li>Set \"bEnableSelfRegistration\" to \"true\"</li> </ul> <ul> <li>Validate at the bottom of the page</li> </ul> <ul> <li>Leave the session to see the end result</li> </ul>"},{"location":"user-guide/doc-admin/family/doc-create-family-auto/#families-registration","title":"Families registration","text":"<p>On CRM the login window will be</p> <p></p> <p>Use \"register a new family\"</p> <p></p> <p>Enter the last name, and the data needed, with the number of children</p> <p>Validate each members (spouse and children)</p> <p></p> <p>The new family is now registered</p> <p></p>"},{"location":"user-guide/doc-admin/family/doc-create-family-auto/#see-the-new-registrants-as-administrator","title":"See the new registrants as administrator","text":"<ul> <li>Go to</li> </ul> <ul> <li>then choose</li> </ul> <ul> <li>The administrator will see all the families registered</li> </ul> <ul> <li>to visualize the family, or delete it click on the Family ID : 18 for example</li> </ul> <p>Note : It is possible to visualize each family individually and to activate or deactivate it, depending on the needs</p>"},{"location":"user-guide/doc-admin/family/doc-create-family/","title":"Register a family &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/family/doc-create-family/#to-register-a-family-for-the-first-time","title":"To register a family for the first time","text":"<p>rien de plus simple, aller dans le menu \"Personnes &amp; Familles\", \"Familles\", \"Ajouter une Famille\". Go to the menu in \"Individuals and families\", then \"Families\", and \"Register a family\"</p> <p></p>"},{"location":"user-guide/doc-admin/family/doc-create-family/#data","title":"Data","text":"<p>There you can enter all the data needed</p> <p>If one need custom field it is in this part that they have to be entered</p>"},{"location":"user-guide/doc-admin/family/doc-delete-family/","title":"De-activate Delete a family","text":""},{"location":"user-guide/doc-admin/family/doc-delete-family/#delete-a-family","title":"Delete a family","text":"<p>You can look for a family via the search link in the menu.</p> <p>You'll fall onto this page:</p> <p></p> <p>A family removal can have legal impacts:</p> <ul> <li>In case of deposits made by the family</li> <li>Notes took by the family</li> </ul>"},{"location":"user-guide/doc-admin/family/doc-delete-family/#deactivate-a-family","title":"Deactivate a family","text":"<p>A family deactivated can no longer be look for in the data base GDPR.</p> <p></p>"},{"location":"user-guide/doc-admin/family/doc-delete-family/#note","title":"Note","text":"<p>After two years, the family will be transfer to the GDPR management and will be administered via DPO managing the GDPR part.</p>"},{"location":"user-guide/doc-admin/family/doc-delete-family/#gdpr-warning","title":"GDPR :WARNING","text":"<p>Warning An deactivate family should not be reactivated carelessly, indeed the deactivation date would be wrong, which could lead to legal proceedings because of the GDPR.</p>"},{"location":"user-guide/doc-admin/family/doc-families/","title":"Families &amp; EcclesiaCRM","text":"<p>EcclesiaCRM gives to the family a central role, in a polymorph form, a moving family defined by its name, members and other characteristics that can be add (custom fields)</p> <p>NewsLetter a Family may receive the newsletter.</p>"},{"location":"user-guide/doc-admin/family/doc-families/#one-family-an-address","title":"One family, an address","text":"<p>Each individual in the CRM has an address, the family concept allows an actual address assignment.</p>"},{"location":"user-guide/doc-admin/family/doc-families/#one-family-several-roles","title":"One family, several roles","text":"<p>Each member of the family has a specific role:</p> <ul> <li>the family representative</li> <li>the spouse</li> <li>the children</li> </ul> <p>The family representative is key to see the family on the member list. This part can be changed in \"people management\" and \"customization\"</p>"},{"location":"user-guide/doc-admin/family/doc-families/#one-family-different-proprieties","title":"One family, different proprieties","text":"<p>At first a family has to be create by the custom priorities * A mono parental family * A family to help * etc ...</p> <p>This part can be changed in \"people management\" and \"customization\"</p>"},{"location":"user-guide/doc-admin/family/doc-families/#one-family-plenty-of-custom-fields","title":"One family, plenty of custom fields","text":"<p>The custom fields can be add as desired and different for each family.</p> <p>The custom fields types are:</p> <ul> <li>Boolean :</li> <li>Date    :</li> <li>Text type 50 or 100 or infinite:</li> <li>Year   :</li> <li>Season  :</li> <li>Number  :</li> <li>Group member :</li> <li>Money  :</li> <li>Phone number :</li> <li>Custom drop-down list :</li> </ul>"},{"location":"user-guide/doc-admin/family/doc-families/#one-family-funds-or-automatic-payments","title":"One family, funds or automatic payments","text":"<p>A family can donate and the donation can be claim for the fiscal receipts.</p>"},{"location":"user-guide/doc-admin/family/doc-families/#some-notes","title":"Some notes","text":"<p>A family can keep some notes.</p> <p></p>"},{"location":"user-guide/doc-admin/family/doc-verify-family-auto/","title":"Self-verification families","text":"<p>You can ask the family to validate the data logged.</p>"},{"location":"user-guide/doc-admin/family/doc-verify-family-auto/#to-send-a-self-audit","title":"To send a self-audit","text":"<p>Via the menu, look for a family and then click on \"validate the data\"</p> <p></p> <p></p> <p>An email will be send in the form of:</p>"},{"location":"user-guide/doc-admin/family/doc-verify-family-auto/#user-reply","title":"User reply","text":"<p>They can add a comment</p>"},{"location":"user-guide/doc-admin/family/doc-verify-family-auto/#administrator","title":"Administrator","text":"<p>To see the user's reply go to :</p> <p></p> <p>Select:</p> <p></p> <p>Which lead to:</p> <p></p> <p>With the replies.</p>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-customfields/","title":"Family custom fields &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-customfields/#go-to-customization-settings","title":"Go to customization settings","text":"<p>Choose in the menu \"Edit Custom Family Fields\"</p>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-customfields/#to-create-a-new-custom-field","title":"To create a new custom field","text":"<p>Click on \"add a new propriety\"</p> <p></p> <p>The custom fields are:</p> <ul> <li>Boolean :</li> <li>Date    :</li> <li>Text type 50 or 100 or infinite:</li> <li>Year   :</li> <li>Season  :</li> <li>Number  :</li> <li>Group member :</li> <li>Money  :</li> <li>Phone number :</li> <li>Custom drop-down list :</li> </ul> <p>It is possible to:</p> <ul> <li>Position them on the left or on the right</li> <li>Establish the rights by function: bAll etc ... Establish the rights by function:</li> </ul>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-properties/","title":"Family properties &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-properties/#go-to-custom-settings","title":"Go to custom settings","text":"<p>Choose in the menu \"Family Properties\"</p>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-properties/#to-add-a-new-propriety","title":"To add a new propriety","text":"<p>Click on \"Add a New Family Property\"</p> <p></p> <p>The custom fields are:</p> <ul> <li>the name of the property</li> <li>A family with the property</li> <li>a Prompt</li> </ul>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-roles/","title":"Family roles &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-roles/#go-to-the-custom-settings","title":"Go to the custom settings","text":"<p>Il suffit de choisir l'item de menu : \"R\u00f4les d'une famille\" Choose in the menu \"family's function\"</p>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-roles/#default-settings","title":"default settings","text":"<p>the first time EcclesiaCRM is installed the functions are defined by default.</p>"},{"location":"user-guide/doc-admin/family/doc-custom-settings/doc-family-roles/#addchange-the-functions","title":"Add/change the functions","text":"<ul> <li>It is possible to classify the functions with pointers</li> <li>To delete a function</li> <li>To create a function</li> </ul>"},{"location":"user-guide/doc-admin/group/doc-groups-export-contacts/","title":"Export contacts with CardDav&amp; EcclesiaCRM","text":"<p>Select the group and click on the button as follows:</p> <p></p> <p>The exported file can be add to the address notebook or to thunderBird.</p>"},{"location":"user-guide/doc-admin/group/doc-groups-management/","title":"Group &amp; Menu &amp; Type in EcclesiaCRM","text":"<p>The different kinds of groups provide a group classification by categories, which can be made in the menu's left sidebar.</p>"},{"location":"user-guide/doc-admin/group/doc-groups-management/#add-a-new-group","title":"Add a new group","text":"<p>In the left sidebar, select the item \"List Groups\" in the \"Groups\" menu.</p> <p></p> <p>Then</p> <p></p> <p>Add:</p> <ul> <li>The name, \"test\" for example</li> <li>Then click on \"Add New Group\" button.</li> </ul> <p></p> <p>The new group is in category \"unassigned groups\"</p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-groups-management/#kind-of-group-and-the-groupe-classification-in-the-menu","title":"Kind of group and the groupe classification (in the menu)","text":"<p>To create a new kind of group</p> <p></p> <p>There you can create the new kind of group:</p> <p></p> <p>Then select the group to assign a property to it:</p> <p></p> <p>Click on the button</p> <p></p> <p>Choose the kind</p> <p></p> <p>And use the \"Save\" button to validate the kind.</p> <p>Here is the result:</p> <p></p> <p>Note - The Sundayschool group is a special kind which we'll see in an other part. - all the groups kind are completely customizable (for example in foreign language).</p>"},{"location":"user-guide/doc-admin/group/doc-groups-managers/","title":"Group management &amp; EcclesiaCRM","text":"<p>A group manager can add or remove a member to a group and only for this group.</p> <p>A group manager could be define in a global or a local way:</p> <ul> <li>Global : this manager can determine a membership in any group</li> <li>Local : this manager will only be able to administer the membership of a specific group</li> </ul> <p>Note : a group manager can add a member, who already exists in the CRM or a new one, in a group. A family can enroll itself in the CRM (see the \"Self-register families\" section)</p>"},{"location":"user-guide/doc-admin/group/doc-groups-managers/#overall-management-of-all-groups","title":"Overall management of all groups","text":"<p>A system user can have the function \"group management\"</p> <p>To this end:</p> <p></p> <p>One edits a user:</p> <p></p> <p>Click the pencil icon.</p> <p>Assigns a role :</p> <p></p> <p>Check the box and use the \"Save\" button at the bottom.</p>"},{"location":"user-guide/doc-admin/group/doc-groups-managers/#local-management-of-a-group","title":"Local management of a group","text":"<p>One has to select the group for which a local manager will be added, and click on \"+\" which will open the local manager's screen</p> <p></p> <p>Then click on the button \"Add Manager\"</p> <p></p> <p>One would be able to choose the person assigned to be the local manager.</p> <p></p> <p>The final result :</p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-groups-members-roles/","title":"Members &amp; Roles &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/group/doc-groups-members-roles/#change-the-role-of-a-member","title":"Change the role of a member","text":"<p>One chooses the group in which they want to change the role of a member.</p> <p>Click on \"pencil\"</p> <p></p> <p>Then one can change the role</p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-groups-members-roles/#add-a-new-member-role","title":"Add a new member role","text":"<p>One chooses the group in which the role will be add</p> <p></p> <p>One can add a new role to a member of the group selected</p> <p></p> <p>Note - The students and teachers roles are selected by default in the sundayschool groups, you can't change them.</p>"},{"location":"user-guide/doc-admin/group/doc-groups/","title":"Groups","text":""},{"location":"user-guide/doc-admin/group/doc-groups/#overview","title":"Overview","text":"<p>The groups in CRM have a preponderant place in :</p> <ul> <li>Gathering a few people in a same \"container\"</li> <li>Sending emails</li> <li>Managing the Sundayschool groups</li> <li>Classifying the menues, by \"types\" in the left sidebar; which is as possible with the classic groups than the sundayschool groups.</li> </ul> <p>Via the \"Cart\", the users will be able to :</p> <ul> <li>Do CSV extractions</li> <li>Print</li> <li>create to a directory</li> <li>create to labels</li> <li>create to badges</li> <li>create QR code badges</li> <li>Making appointment</li> <li>create exportable address book.</li> </ul>"},{"location":"user-guide/doc-admin/group/doc-groups/#have-access-to-the-groups","title":"Have access to the groups","text":"<p>To have to all the groups, one has to open the sude bare, as following :</p> <p></p> <p>One selects \"List Groups\":</p> <p></p> <p>Then classify the groups by \"kind\"</p> <p></p> <p>There, one only will have the sundayschool groups</p> <p>Note The kind of group provides the classification of the groups in the left sidebar.</p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-groups/#add-a-new-group","title":"Add a new group","text":"<p>One has to go at the bottom of the group listing, as following :</p> <p></p> <p>One adds:</p> <ul> <li>The name of the group</li> <li>Then click on \"Add New Group\"</li> </ul>"},{"location":"user-guide/doc-admin/group/doc-groups/#put-one-or-more-members-in-the-cart","title":"Put one or more members in the \"cart\"","text":"<p>The user has to have a cart role to use this tool.</p> <p>One goes to the section \"List all the groups\"</p> <p> </p> <p>Note</p> <ul> <li>Two groups are add to cart</li> <li>The cart icon has the some of the users accounts</li> </ul> <p>To do that, consult the section \"Cart\"</p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-global-properties/","title":"Propri\u00e9t\u00e9s globales &amp; EcclesiaCRM","text":"<p>In EcclesiaCRM there are two types of properties  </p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-global-properties/#global-properties","title":"Global properties","text":"<p>There are set for every group </p> <p>To access the properties </p> <p></p> <p>One can add or change the properties via : </p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-global-properties/#assign-global-properties-to-a-group","title":"Assign global properties to a group","text":"<p>Via the search bar one can choose a group </p> <p></p> <p>And assign the property to the group as following: </p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-specific-properties/","title":"Propri\u00e9t\u00e9s globales &amp; EcclesiaCRM","text":"<p>In EcclesiaCRM there are two types of properties:</p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-specific-properties/#the-specific-properties","title":"The specific properties","text":"<p>There are assign to one group only, to access these kind of properties one has to choose a group via the search bar:</p> <p></p> <p>Then activate the specific properties according to the group</p> <p></p> <p>-Click on:</p> <p></p> <p></p> <p>One can now add the specific properties to the group chosen</p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-specific-properties/#assign-to-a-groupe-some-specific-properties","title":"Assign to a groupe some specific properties","text":"<p>Via the search bar, one can choose a group:</p> <p></p> <p>And edit:</p> <p></p> <p>And one can add the new properties as follows:</p> <p></p> <p>Here is an example:</p> <p></p>"},{"location":"user-guide/doc-admin/group/doc-custom-settings/doc-groups-specific-properties/#tip","title":"Tip:","text":"<p>By clicking on the checkbox \"Person profile\", each user has the possibility to change the value.</p> <p>With this tip we obtain a form of survey, like a customizable Doodle.</p> <p>Last the result, when you click the button \"Return to Group\".</p> <p></p>"},{"location":"user-guide/doc-admin/person/doc-create-person/","title":"Register a Person &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/person/doc-create-person/#pour-creer-une-personne-to-create-a-member","title":"Pour cr\u00e9er une personne To create a member","text":"<p>Go to menu \"People &amp; Families\", then \"Persons\", and \"Add New Person\"</p> <p></p>"},{"location":"user-guide/doc-admin/person/doc-create-person/#data","title":"Data","text":"<p>One can associate different data with during the creation of the member, such as:</p> <ul> <li>Their subscription to the NewsLetter</li> <li>Their Facebook account ID</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-create-person/#address","title":"Address","text":"<p>One can change the person's address, or add a new one</p>"},{"location":"user-guide/doc-admin/person/doc-create-person/#custom-fields","title":"Custom Fields","text":"<p>If one has made custom fields, they can enter them during this part of the creation of the new member</p>"},{"location":"user-guide/doc-admin/person/doc-delete-person/","title":"De-activate delete a person","text":""},{"location":"user-guide/doc-admin/person/doc-delete-person/#to-delete-a-person","title":"To delete a person","text":"<p>Via the search bar in the left menu, one can search the person they want to delete, as following:</p> <p></p> <p>To delete a member may have legal impacts, if :</p> <ul> <li>The member had made several deposits</li> <li>The member had taken notes</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-delete-person/#deactivate-a-person","title":"Deactivate a person","text":"<p>A member deactivated can no longer be look for in the data base (GDPR).</p> <p></p> <p>After two years, the member will be transfer to the GDPR management and will be administered via DPO managing the GDPR part.</p>"},{"location":"user-guide/doc-admin/person/doc-delete-person/#gdpr-warning","title":"GDPR : WARNING","text":"<p>Warning An deactivate member should not be reactivated carelessly, indeed the deactivation date would be wrong, which could lead to legal proceedings because of the GDPR.</p>"},{"location":"user-guide/doc-admin/person/doc-persons/","title":"Person &amp; EcclesiaCRM","text":"<p>EcclesiaCRM gives the possibility to create a member who could be a system user, a family member, or a group member</p> <p>NewsLetter a Family may receive the newsletter.</p>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-member-an-address","title":"One member, an address","text":"<p>Each individual in the CRM has an address, the family concept allows an actual address assignment.</p>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-member-several-roles","title":"One member, several roles","text":"<p>Each member of the family has a specific role:</p> <ul> <li>the family representative</li> <li>the spouse</li> <li>the children</li> </ul> <p>The family representative is necessary to see a family on a member card</p>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-member-a-classification","title":"One member, a classification","text":"<ul> <li>a member</li> <li>a prayer group leader</li> </ul> <p>This part can be changed in \"people management\" and \"customization\"</p>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-member-different-proprieties","title":"One member, different proprieties","text":"<p>A member has different proprieties which are customizable, such as:</p> <ul> <li>Un enfant peut \u00eatre allergique A child can be allergic</li> <li>A member can have personnel constraints</li> </ul> <p>This part can be changed in \"people management\" and \"customization\"</p>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-member-a-number-of-groups","title":"One member, a number of groups","text":"<p>A member can be a part of one or more group:</p> <ul> <li>Of sundaySchool</li> <li>Of a prayer group</li> <li>Of the elders group</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-member-plenty-of-custom-fields","title":"One member, plenty of custom fields","text":"<p>The custom fields can be add as desired and different for each family.</p> <p>The custom fields types are:</p> <ul> <li>Boolean :</li> <li>Date    :</li> <li>Text type 50 or 100 or infinite:</li> <li>Year   :</li> <li>Season  :</li> <li>Number  :</li> <li>Group member :</li> <li>Money  :</li> <li>Phone number :</li> <li>Custom drop-down list :</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-persons/#one-family-funds-or-automatic-payments-only-if-the-member-is-not-a-part-of-a-family","title":"One family, funds or automatic payments (only if the member is not a part of a family)","text":"<p>A family can donate and the donation can be claim for the fiscal receipts.</p> <p>Reminder an address is a container of members. So an address is most of the time a family.</p>"},{"location":"user-guide/doc-admin/person/doc-persons/#some-notes","title":"Some notes","text":"<p>A family can keep some documents, which are exportable to the EDrive</p> <p></p>"},{"location":"user-guide/doc-admin/person/doc-persons/#an-edrive","title":"An EDrive","text":"<p>One can go see the part \"User Manual\" and \"EDrive in the CRM\"</p>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-classification/","title":"Classifications management","text":"<p>There one will be able to set : - The members' classifications - The GoogleMaps icons</p> <p>To access the management classifications</p>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-classification/#go-to-the-settings-classifications-manager","title":"Go to the settings : \"Classifications Manager\"","text":""},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-classification/#settings","title":"settings","text":"<p>Then one will be able to:</p> <ul> <li>enter a new classification</li> <li>delete one, with x on the left of the Text Field</li> <li>make it invisible on homepage.</li> <li>assign a Googlemaps, a Openstreet Map or a Bing Map icon.</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-classification/#classification","title":"Classification","text":"<p>With the up or down arrows one can establish an icon classification :</p> <ul> <li>when one edits a member's profil</li> <li>in the Googlemaps classification</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-classification/#to-change-the-associate-icon","title":"To change the associate icon","text":"<p>Click on the X on the left of the icon Then click on the +</p> <p></p> <p>One will now be able to choose the icon in the list</p> <p></p> <p>Note It is possible to add an icon by adding it on the server in the folder :  /skin/icons/markers/ It is possible to add an icon by searching it on the server in the file :</p>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-customfields/","title":"Custom fields &amp; EcclesiaCRM","text":""},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-customfields/#go-to-customization-settings","title":"Go to customization settings","text":"<p>Choose in the menu \" Change the family custom fields\"</p>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-customfields/#to-create-a-new-custom-field","title":"To create a new custom field","text":"<p>Click on \"add a new propriety\"</p> <p></p> <p>The custom fields are:</p> <ul> <li>Boolean :</li> <li>Date    :</li> <li>Text type 50 or 100 or infinite:</li> <li>Year   :</li> <li>Season  :</li> <li>Number  :</li> <li>Group member :</li> <li>Money  :</li> <li>Phone number :</li> <li>Custom drop-down list :</li> </ul> <p>It is possible to:</p> <ul> <li>Position them on the left or on the right</li> <li>Establish the rights by function: bAll etc ... Establish the rights by function:</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-properties/","title":"Person : Propety list &amp; EcclesiaCRM","text":"<p>A member may be allergic or does not want to be on the pictures.</p> <p>The properties will be visible if badges are edited for Sundayschool or lists.</p>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-properties/#go-to-settings","title":"Go to settings","text":""},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-properties/#settings","title":"Settings","text":"<p>Here you can :</p> <ul> <li>enter a new property</li> <li>delete one</li> <li>Give additional data</li> </ul>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-properties/#creation-of-a-new-property","title":"Creation of a new property","text":"<p>Here you can enter:</p> <ul> <li>\"name\" : Allergic</li> <li>\"Prompt\" : to what</li> </ul> <p>for example:</p> <p></p> <ul> <li>\"The person: with this properties\" is important too</li> </ul> <p>You'll end up with:</p> <p></p>"},{"location":"user-guide/doc-admin/person/doc-custom-settings/doc-person-properties/#add-a-new-property-to-a-member","title":"Add a new property to a member","text":""},{"location":"user-guide/doc-dev/doc-api/api/","title":"EcclesiaCRM documentation de l'API","text":"<p>EcclesiaCRM use Slim 4.10.0 which allow to make api call to the restricted area of the CRM.</p>"},{"location":"user-guide/doc-dev/doc-api/api/#events-calendar","title":"EVENTS &amp; CALENDAR","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-calendar","title":"API \"calendar\"","text":"<p>in route : \"/api/routes/calendar/calendar-calendarV2.php\"</p> Route Method function Description <code>/getallevents</code> POST CalendarV2Controller::class . ':getallCalendarEvents' Get all events for all calendars for a specified range <ul> <li><code>{ref}</code>-&gt;<code>date</code> :: the start date : YYYY-MM-DD</li> <li><code>{ref}</code>-&gt;<code>date</code> :: the end date : YYYY-MM-DD</li> </ul> Route Method function Description <code>/getalleventsForEventsList</code> POST CalendarV2Controller::class . ':getallCalendarEventsForEventsList' Get all events for all calendars for a specified range <ul> <li><code>{ref}</code>-&gt;<code>date</code> :: the start date : YYYY-MM-DD</li> <li><code>{ref}</code>-&gt;<code>date</code> :: the end date : YYYY-MM-DD</li> </ul> Route Method function Description <code>/numberofcalendars</code> POST CalendarV2Controller::class . ':numberOfCalendars' get all the number of calendar for the current user Route Method function Description <code>/showhidecalendars</code> POST CalendarV2Controller::class . ':showHideCalendars' Show Hide calendar <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: isPresent</li> </ul> Route Method function Description <code>/setDescriptionType</code> POST CalendarV2Controller::class . ':setCalendarDescriptionType' set Description type for a calendar <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>string</code> :: desc</li> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> </ul> Route Method function Description <code>/getallforuser</code> POST CalendarV2Controller::class . ':getAllCalendarsForUser' Get all calendars for a specified user <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: onlyvisible</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: allCalendars</li> </ul> Route Method function Description <code>/info</code> POST CalendarV2Controller::class . ':calendarInfo' Get infos for a calendar <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> </ul> Route Method function Description <code>/setcolor</code> POST CalendarV2Controller::class . ':setCalendarColor' Set color for a calendar <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>hex</code> :: color : #FFF</li> </ul> Route Method function Description <code>/setckecked</code> POST CalendarV2Controller::class . ':setCheckedCalendar' Check the calendar to make it visible <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: isChecked</li> </ul> Route Method function Description <code>/setckeckedselected</code> POST CalendarV2Controller::class . ':setCheckedSelectedCalendar' Check the calendar to make it visible <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: isChecked</li> </ul> Route Method function Description <code>/new</code> POST CalendarV2Controller::class . ':newCalendar' Create a new calendar <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> </ul> Route Method function Description <code>/newReservation</code> POST CalendarV2Controller::class . ':newCalendarReservation' Create new calendar reservation <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> <li><code>{ref}</code>-&gt;<code>string</code> :: desc</li> </ul> Route Method function Description <code>/modifyname</code> POST CalendarV2Controller::class . ':modifyCalendarName' Change calendar name <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> </ul> Route Method function Description <code>/getinvites</code> POST CalendarV2Controller::class . ':getCalendarInvites' get attendees for a calendar <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> </ul> Route Method function Description <code>/sharedelete</code> POST CalendarV2Controller::class . ':shareCalendarDelete' Delete a share calendar for a person <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>int</code> :: principal</li> </ul> Route Method function Description <code>/sharefamily</code> POST CalendarV2Controller::class . ':shareCalendarFamily' Share a calendar with a person <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>int</code> :: person ID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: notification</li> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>int</code> :: family ID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: notification</li> </ul> Route Method function Description <code>/sharegroup</code> POST CalendarV2Controller::class . ':shareCalendarGroup' Share a calendar with an entire group <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>int</code> :: group ID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: notification</li> </ul> Route Method function Description <code>/setrights</code> POST CalendarV2Controller::class . ':setCalendarRights' Share a calendar with an entire group <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> <li><code>{ref}</code>-&gt;<code>int</code> :: principal</li> <li><code>{ref}</code>-&gt;<code>int</code> :: rightAccess</li> </ul> Route Method function Description <code>/delete</code> POST CalendarV2Controller::class . ':deleteCalendar' Delete a calendar <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: calIDs</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-events","title":"API \"events\"","text":"<p>in route : \"/api/routes/calendar/calendar-eventsV2.php\"</p> Route Method function Description <code>/</code> GET CalendarEventV2Controller::class . \":getAllEvents\" Get all events for all calendars for a specified range Route Method function Description <code>/notDone</code> GET CalendarEventV2Controller::class . \":getNotDoneEvents\" Get all events after now Route Method function Description <code>/types</code> GET CalendarEventV2Controller::class . \":getEventTypes\" Get all events from today Route Method function Description <code>/names</code> GET CalendarEventV2Controller::class . \":eventNames\" Get all event names Route Method function Description <code>/deleteeventtype</code> POST CalendarEventV2Controller::class . \":deleteeventtype\" delete event type <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: type ID</li> </ul> Route Method function Description <code>/info</code> POST CalendarEventV2Controller::class . \":eventInfo\" get event info <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: event ID</li> </ul> Route Method function Description <code>/person</code> POST CalendarEventV2Controller::class . \":personCheckIn\" Set a person for the event + check <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: event ID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: person ID</li> </ul> Route Method function Description <code>/group</code> POST CalendarEventV2Controller::class . \":groupCheckIn\" Set the group persons for the event + check <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: event ID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: group ID</li> </ul> Route Method function Description <code>/family</code> POST CalendarEventV2Controller::class . \":familyCheckIn\" Set the family persons for the event + check <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: event ID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: family ID</li> </ul> Route Method function Description <code>/attendees</code> POST CalendarEventV2Controller::class . \":eventCount\" get event count <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: event ID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: type ID</li> </ul> Route Method function Description <code>/</code> POST CalendarEventV2Controller::class . \":manageEvent\" manage an event eventAction, [createEvent,moveEvent,resizeEvent,attendeesCheckinEvent,suppress,modifyEvent] <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: type ID</li> <li><code>{ref}</code>-&gt;<code>array</code> :: calendarID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: reccurenceID</li> <li><code>{ref}</code>-&gt;<code>start</code> :: the start date : YYYY-MM-DD</li> <li><code>{ref}</code>-&gt;<code>start</code> :: the end date : YYYY-MM-DD</li> <li><code>{ref}</code>-&gt;<code>location</code> :: location</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#documents-files","title":"DOCUMENTS FILES","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-ckeditor","title":"API \"ckeditor\"","text":"<p>in route : \"/api/routes/documents/documents-ckeditor.php\"</p> Route Method function Description <code>/{personId:[0-9]+}/templates</code> GET DocumentCKEditorController::class . ':templates' get all templates Route Method function Description <code>/alltemplates</code> POST DocumentCKEditorController::class . ':alltemplates' get all templates <ul> <li><code>{ref}</code>-&gt;<code>id</code> :: personID</li> </ul> Route Method function Description <code>/deletetemplate</code> POST DocumentCKEditorController::class . ':deleteTemplate' delete template <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: templateID</li> </ul> Route Method function Description <code>/renametemplate</code> POST DocumentCKEditorController::class . ':renametemplate' rename template <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: templateID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: desc</li> </ul> Route Method function Description <code>/savetemplate</code> POST DocumentCKEditorController::class . ':saveTemplate' save template <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: desc</li> <li><code>{ref}</code>-&gt;<code>string</code> :: text</li> </ul> Route Method function Description <code>/saveAsWordFile</code> POST DocumentCKEditorController::class . ':saveAsWordFile' save template as word file <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: text</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-document","title":"API \"document\"","text":"<p>in route : \"/api/routes/documents/documents-document.php\"</p> Route Method function Description <code>/create</code> POST DocumentDocumentController::class . ':createDocument' create a document <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: famID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> <li><code>{ref}</code>-&gt;<code>string</code> :: text</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: bPrivate</li> </ul> Route Method function Description <code>/get</code> POST DocumentDocumentController::class . ':getDocument' get a document <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: docID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: famID</li> </ul> Route Method function Description <code>/update</code> POST DocumentDocumentController::class . ':updateDocument' update a document <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: docID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> <li><code>{ref}</code>-&gt;<code>string</code> :: text</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: bPrivate</li> </ul> Route Method function Description <code>/delete</code> POST DocumentDocumentController::class . ':deleteDocument' delete a document <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: docID</li> </ul> Route Method function Description <code>/leave</code> POST DocumentDocumentController::class . ':leaveDocument' leave a document (in case of a share document) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: docID</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-filemanager","title":"API \"filemanager\"","text":"<p>in route : \"/api/routes/documents/documents-filemanager.php\"</p> Route Method function Description <code>/{personID:[0-9]+}</code> POST DocumentFileManagerController::class . ':getAllFileNoteForPerson' get All the files for personID user <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> </ul> Route Method function Description <code>/getFile/{personID:[0-9]+}/[{path:.*}]</code> GET DocumentFileManagerController::class . ':getRealFile' get real file <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: path</li> </ul> Route Method function Description <code>/getPreview</code> POST DocumentFileManagerController::class . ':getPreview' get preview for file name <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: name</li> </ul> Route Method function Description <code>/changeFolder</code> POST DocumentFileManagerController::class . ':changeFolder' change to folder name for personID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: folder</li> </ul> Route Method function Description <code>/folderBack</code> POST DocumentFileManagerController::class . ':folderBack' change to folder back <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> </ul> Route Method function Description <code>/deleteOneFolder</code> POST DocumentFileManagerController::class . ':deleteOneFolder' delete folder <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: folder</li> </ul> Route Method function Description <code>/deleteOneFile</code> POST DocumentFileManagerController::class . ':deleteOneFile' delete one file <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: file</li> </ul> Route Method function Description <code>/deleteFiles</code> POST DocumentFileManagerController::class . ':deleteFiles' delete files <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: files</li> </ul> Route Method function Description <code>/movefiles</code> POST DocumentFileManagerController::class . ':movefiles' move a file to another folder <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: files</li> <li><code>{ref}</code>-&gt;<code>string</code> :: folder</li> </ul> Route Method function Description <code>/newFolder</code> POST DocumentFileManagerController::class . ':newFolder' create new folder <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: folder</li> </ul> Route Method function Description <code>/rename</code> POST DocumentFileManagerController::class . ':renameFile' rename file <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: oldName</li> <li><code>{ref}</code>-&gt;<code>string</code> :: newName</li> <li><code>{ref}</code>-&gt;<code>string</code> :: type</li> </ul> Route Method function Description <code>/uploadFile/{personID:[0-9]+}</code> POST DocumentFileManagerController::class . ':uploadFile' upload file to current folder, everything is contained in $_FILES Route Method function Description <code>/getRealLink</code> POST DocumentFileManagerController::class . ':getRealLink' upload : get file to file path <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: pathFile</li> </ul> Route Method function Description <code>/setpathtopublicfolder</code> POST DocumentFileManagerController::class . ':setpathtopublicfolder' set current path to public folder"},{"location":"user-guide/doc-dev/doc-api/api/#api-sharedocument","title":"API \"sharedocument\"","text":"<p>in route : \"/api/routes/documents/documents-sharedocument.php\"</p> Route Method function Description <code>/getallperson</code> POST DocumentShareController::class . ':getAllShareForPerson' get all shared persons for a noteID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> </ul> Route Method function Description <code>/addperson</code> POST DocumentShareController::class . ':addPersonToShare' share a note to a personID from currentPersonID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPersonID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: notification</li> </ul> Route Method function Description <code>/addfamily</code> POST DocumentShareController::class . ':addFamilyToShare' share a note to a familyID from currentPersonID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: familyID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPersonID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: notification</li> </ul> Route Method function Description <code>/addgroup</code> POST DocumentShareController::class . ':addGroupToShare' share a note to a groupID from currentPersonID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: groupID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPersonID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: notification</li> </ul> Route Method function Description <code>/deleteperson</code> POST DocumentShareController::class . ':deletePersonFromShare' remove a personID from a share note <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> </ul> Route Method function Description <code>/setrights</code> POST DocumentShareController::class . ':setRightsForPerson' set right access to a note <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: rightAccess</li> </ul> Route Method function Description <code>/cleardocument</code> POST DocumentShareController::class . ':clearDocument' delete a note <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: noteId</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-deposits","title":"API \"deposits\"","text":"<p>in route : \"/api/routes/finance/finance-deposits.php\"</p> Route Method function Description `` POST FinanceDepositController::class . ':createDeposit' create a deposit type <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: depositType</li> <li><code>{ref}</code>-&gt;<code>string</code> :: depositComment</li> <li><code>{ref}</code>-&gt;<code>string</code> :: depositDate</li> </ul> Route Method function Description `` GET FinanceDepositController::class . ':getAllDeposits' get All the deposits if you're a financial Route Method function Description <code>/{id:[0-9]+}</code> GET FinanceDepositController::class . ':getOneDeposit' get information about one deposit <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> </ul> Route Method function Description <code>/{id:[0-9]+}</code> POST FinanceDepositController::class . ':modifyOneDeposit' modify a deposit <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> <li><code>{ref}</code>-&gt;<code>string</code> :: depositType</li> <li><code>{ref}</code>-&gt;<code>string</code> :: depositComment</li> <li><code>{ref}</code>-&gt;<code>string</code> :: depositDate</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: depositClosed</li> </ul> Route Method function Description <code>/{id:[0-9]+}/ofx</code> GET FinanceDepositController::class . ':createDepositOFX' create an OFX deposit export <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> </ul> Route Method function Description <code>/{id:[0-9]+}/pdf</code> GET FinanceDepositController::class . ':createDepositPDF' create a pdf deposit export <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> </ul> Route Method function Description <code>/{id:[0-9]+}/csv</code> GET FinanceDepositController::class . ':createDepositCSV' create a CSV deposit export <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> </ul> Route Method function Description <code>/{id:[0-9]+}</code> DELETE FinanceDepositController::class . ':deleteDeposit' delete deposit <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> </ul> Route Method function Description <code>/{id:[0-9]+}/pledges</code> GET FinanceDepositController::class . ':getAllPledgesForDeposit' get all the pledges associated to the deposit <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: id (deposit id)</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-donationfunds","title":"API \"donationfunds\"","text":"<p>in route : \"/api/routes/finance/finance-donationfunds.php\"</p> Route Method function Description <code>/</code> POST FinanceDonationFundController::class . ':getAllDonationFunds' get all donation funds Route Method function Description <code>/edit</code> POST FinanceDonationFundController::class . ':editDonationFund' get all infos of donation fund to edit a donation fund <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundId</li> </ul> Route Method function Description <code>/set</code> POST FinanceDonationFundController::class . ':setDonationFund' set donation fund informations <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundId</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: Activ</li> </ul> Route Method function Description <code>/delete</code> POST FinanceDonationFundController::class . ':deleteDonationFund' remove donation fund by fundId <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundId</li> </ul> Route Method function Description <code>/create</code> POST FinanceDonationFundController::class . ':createDonationFund' create donation fund <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: Name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: Activ</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-payments","title":"API \"payments\"","text":"<p>in route : \"/api/routes/finance/finance-payments.php\"</p> Route Method function Description <code>/{id:[0-9]+}</code> GET FinancePaymentController::class . ':getPayment' get payment for Id as JSON <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Id</li> </ul> Route Method function Description <code>/</code> POST FinancePaymentController::class . ':getSubmitOrPayement' Get submit or Payment Route Method function Description <code>/byGroupKey</code> DELETE FinancePaymentController::class . ':deletePaymentByGroupKey' Delete Payment par GroupKey <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: Groupkey</li> </ul> Route Method function Description <code>/family</code> POST FinancePaymentController::class . ':getAllPayementsForFamily' Get all payments for familyId <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: famId</li> </ul> Route Method function Description <code>/info</code> POST FinancePaymentController::class . ':getAutoPaymentInfo' Get auto payment for the author ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: autID</li> </ul> Route Method function Description <code>/families</code> POST FinancePaymentController::class . ':getAllPayementsForFamilies' Get all payments for a family <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: famId</li> </ul> Route Method function Description <code>/delete</code> POST FinancePaymentController::class . ':deletePaymentForFamily' Delete paymentId for Family <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: famId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: paymentId</li> </ul> Route Method function Description <code>/delete/{authID:[0-9]+}</code> GET FinancePaymentController::class . ':deleteAutoPayment' Delete auto payment <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: authID</li> </ul> Route Method function Description <code>/invalidate</code> POST FinancePaymentController::class . ':invalidatePledge' Invalidate Pledge by Id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Id</li> </ul> Route Method function Description <code>/validate</code> POST FinancePaymentController::class . ':validatePledge' Validate Pledge by Id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Id</li> </ul> Route Method function Description <code>/getchartsarrays</code> POST FinancePaymentController::class . ':getDepositSlipChartsArrays' Get depositSlip Charts in the View <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: depositSlipID</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-pledges","title":"API \"pledges\"","text":"<p>in route : \"/api/routes/finance/finance-pledges.php\"</p> Route Method function Description <code>/detail</code> POST FinancePledgeController::class . ':pledgeDetail' Get Pledge details by groupKey <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: groupKey</li> </ul> Route Method function Description <code>/family</code> POST FinancePledgeController::class . ':familyPledges' Get Family pledges by famId <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: famId</li> </ul> Route Method function Description <code>/delete</code> POST FinancePledgeController::class . ':deletePledge' Delete Pledge by payment ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: paymentId</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#people","title":"PEOPLE","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-attendees","title":"API \"attendees\"","text":"<p>in route : \"/api/routes/people/people-attendees.php\"</p> Route Method function Description <code>/event/{eventID:[0-9]+}</code> GET PeopleAttendeesController::class . ':attendeesEvent' Returns event attendees for eventID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> </ul> Route Method function Description <code>/checkin</code> POST PeopleAttendeesController::class . ':attendeesCheckIn' checkin a person ID for event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: checked</li> </ul> Route Method function Description <code>/checkout</code> POST PeopleAttendeesController::class . ':attendeesCheckOut' checkout a person ID for event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: checked</li> </ul> Route Method function Description <code>/student</code> POST PeopleAttendeesController::class . ':attendeesStudent' Add attendees to current Event or create one with the student groupID + rangeInhours (for the predefined eventTypeID : ie time day) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventTypeID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: groupID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: rangeInHours</li> </ul> Route Method function Description <code>/delete</code> POST PeopleAttendeesController::class . ':attendeesDelete' delete Attendee for person ID in event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> </ul> Route Method function Description <code>/deleteAll</code> POST PeopleAttendeesController::class . ':attendeesDeleteAll' delete all Attendees for event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> </ul> Route Method function Description <code>/checkAll</code> POST PeopleAttendeesController::class . ':attendeesCheckAll' check all Attendees for event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: type (1: checkin only, 2: checkin+checkout if $eventAttent-&gt;getCheckinDate() )</li> </ul> Route Method function Description <code>/uncheckAll</code> POST PeopleAttendeesController::class . ':attendeesUncheckAll' uncheck all Attendees for event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: type (1: un-checkin only, 2: un-checkin+un-checkout)</li> </ul> Route Method function Description <code>/groups</code> POST PeopleAttendeesController::class . ':attendeesGroups' Add attendees all the sunday groups with eventTypeID + rangeInhours at dateTime (for the predefined eventTypeID : ie time day) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventTypeID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: dateTime</li> <li><code>{ref}</code>-&gt;<code>string</code> :: rangeInHours</li> </ul> Route Method function Description <code>/deletePerson</code> POST PeopleAttendeesController::class . ':deleteAttendeesPerson' remove a person ID attendee from event ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: eventID</li> </ul> Route Method function Description <code>/addPerson</code> POST PeopleAttendeesController::class . ':addAttendeesPerson' Add a person ID attendee to event ID (with the two possibilities iChildID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: iChildID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: iAdultID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: eventID</li> </ul> Route Method function Description <code>/validate</code> POST PeopleAttendeesController::class . ':validateAttendees' validate the event to close it definitely <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: noteText</li> </ul> Route Method function Description <code>/addFreeAttendees</code> POST PeopleAttendeesController::class . ':addFreeAttendees' add free attendees to the event <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: fieldText</li> <li><code>{ref}</code>-&gt;<code>int</code> :: counts</li> </ul> Route Method function Description <code>/qrcodeCall</code> POST PeopleAttendeesController::class . ':qrcodeCallAttendees' checkin or checkout a person in group ID in reference of the current event ($_SESSION['EventID'] or if the event is create in the same day) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: groupID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: personID</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-families","title":"API \"families\"","text":"<p>in route : \"/api/routes/people/people-families.php\"</p> Route Method function Description <code>/familyproperties/{familyID:[0-9]+}</code> POST PeopleFamilyController::class . \":postfamilyproperties\" Return family properties for familyID <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/isMailChimpActive</code> POST PeopleFamilyController::class . \":isMailChimpActiveFamily\" Return if mailchimp is activated for family <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: email as ref</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}</code> GET PeopleFamilyController::class . \":getFamily\" Return the family as json <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/info</code> POST PeopleFamilyController::class . \":familyInfo\" Return the family info as json <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/numbers</code> GET PeopleFamilyController::class . \":numbersOfAnniversaries\" Return the numbers of Anniversaries for MenuEvent Route Method function Description <code>/search/{query}</code> GET PeopleFamilyController::class . \":searchFamily\" Returns a list of the families who's name matches the :query parameter <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query as ref</li> </ul> Route Method function Description <code>/self-register</code> GET PeopleFamilyController::class . \":selfRegisterFamily\" Returns a list of the self-registered families Route Method function Description <code>/self-verify</code> GET PeopleFamilyController::class . \":selfVerifyFamily\" Returns a list of the self-verified families Route Method function Description <code>/pending-self-verify</code> GET PeopleFamilyController::class . \":pendingSelfVerify\" Returns a list of the pending self-verified families Route Method function Description <code>/byCheckNumber/{scanString}</code> GET PeopleFamilyController::class . \":byCheckNumberScan\" Returns a family string based on the scan string of an MICR reader containing a routing and account number <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: scanString as ref</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/photo</code> GET PeopleFamilyController::class . \":photo\" Returns the photo for the familyId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/thumbnail</code> GET PeopleFamilyController::class . \":thumbnail\" Returns the thumbnail for the familyId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/photo</code> POST PeopleFamilyController::class . \":postFamilyPhoto\" Post the photo for the familyId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/photo</code> DELETE PeopleFamilyController::class . \":deleteFamilyPhoto\" Delete the photo for the familyId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/verify</code> POST PeopleFamilyController::class . \":verifyFamily\" Verify the family for the familyId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/verifyPDF</code> POST PeopleFamilyController::class . \":verifyFamilyPDF\" Verify the family for the familyId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/verify/{familyId:[0-9]+}/now</code> POST PeopleFamilyController::class . \":verifyFamilyNow\" Verify the family for the familyId now <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/verify/url</code> POST PeopleFamilyController::class . ':verifyFamilyURL' Verify the family for the familyId now <ul> <li><code>{id}</code>-&gt;<code>int</code> :: family</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/activate/{status}</code> POST PeopleFamilyController::class . \":familyActivateStatus\" Update the family status to activated or deactivated with :familyId and :status true/false. Pass true to activate and false to deactivate. <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: status as ref</li> </ul> Route Method function Description <code>/{familyId:[0-9]+}/geolocation</code> GET PeopleFamilyController::class . \":familyGeolocation\" Return the location for the family <ul> <li><code>{id}</code>-&gt;<code>int</code> :: familyId as id</li> </ul> Route Method function Description <code>/deletefield</code> POST PeopleFamilyController::class . \":deleteFamilyField\" delete familyField custom field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: orderID as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: field as id</li> </ul> Route Method function Description <code>/upactionfield</code> POST PeopleFamilyController::class . \":upactionFamilyField\" Move up the family custom field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: orderID as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: field as id</li> </ul> Route Method function Description <code>/downactionfield</code> POST PeopleFamilyController::class . \":downactionFamilyField\" Move down the family custom field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: orderID as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: field as id</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-groups","title":"API \"groups\"","text":"<p>in route : \"/api/routes/people/people-groups.php\"</p> Route Method function Description <code>/</code> GET PeopleGroupController::class . \":getAllGroups\" Get all the Groups Route Method function Description <code>/groupproperties/{groupID:[0-9]+}</code> POST PeopleGroupController::class . \":groupproperties\" Get the first Group of the list Route Method function Description <code>/addressbook/extract/{groupId:[0-9]+}</code> GET PeopleGroupController::class . \":addressBook\" get addressbook from a groupID through the url <ul> <li><code>{id}</code>-&gt;<code>int</code> :: groupId</li> </ul> Route Method function Description <code>/search/{query}</code> GET PeopleGroupController::class . \":searchGroup\" search informations in the group <ul> <li><code>{id}</code>-&gt;<code>string</code> :: query</li> </ul> Route Method function Description <code>/deleteAllManagers</code> POST PeopleGroupController::class . \":deleteAllManagers\" delete all managers of a groupId <ul> <li><code>{id}</code>-&gt;<code>int</code> :: groupID</li> </ul> Route Method function Description <code>/deleteManager</code> POST PeopleGroupController::class . \":deleteManager\" delete a manager (personID) of a group (groupId) <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personID</li> <li><code>{id}</code>-&gt;<code>int</code> :: groupID</li> </ul> Route Method function Description <code>/getmanagers</code> POST PeopleGroupController::class . \":getManagers\" get group managers of a group (groupId) <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personID</li> </ul> Route Method function Description <code>/addManager</code> POST PeopleGroupController::class . \":addManager\" get group managers of a group (groupId) <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personID</li> <li><code>{id}</code>-&gt;<code>int</code> :: groupID</li> </ul> Route Method function Description <code>/groupsInCart</code> GET PeopleGroupController::class . \":groupsInCart\" get group managers of a group (groupId) <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personID</li> <li><code>{id}</code>-&gt;<code>int</code> :: groupID</li> </ul> Route Method function Description <code>/</code> POST PeopleGroupController::class . \":newGroup\" create a new group Route Method function Description <code>/{groupID:[0-9]+}</code> POST PeopleGroupController::class . \":updateGroup\" create a new group Route Method function Description <code>/{groupID:[0-9]+}</code> GET PeopleGroupController::class . \":groupInfo\" group info Route Method function Description <code>/{groupID:[0-9]+}/cartStatus</code> GET PeopleGroupController::class . \":groupCartStatus\" get group cart status Route Method function Description <code>/{groupID:[0-9]+}</code> DELETE PeopleGroupController::class . \":deleteGroup\" delete a group Route Method function Description <code>/{groupID:[0-9]+}/members</code> GET PeopleGroupController::class . \":groupMembers\" get all group members Route Method function Description <code>/{groupID:[0-9]+}/events</code> GET PeopleGroupController::class . \":groupEvents\" get all group members Route Method function Description <code>/{groupID:[0-9]+}/removeperson/{userID:[0-9]+}</code> DELETE PeopleGroupController::class . \":removePersonFromGroup\" No description Route Method function Description <code>/{groupID:[0-9]+}/addperson/{userID:[0-9]+}</code> POST PeopleGroupController::class . \":addPersonToGroup\" No description Route Method function Description <code>/{groupID:[0-9]+}/addteacher/{userID:[0-9]+}</code> POST PeopleGroupController::class . \":addTeacherToGroup\" No description Route Method function Description <code>/{groupID:[0-9]+}/userRole/{userID:[0-9]+}</code> POST PeopleGroupController::class . \":userRoleByUserId\" No description Route Method function Description <code>/{groupID:[0-9]+}/roles/{roleID:[0-9]+}</code> POST PeopleGroupController::class . \":rolesByRoleId\" No description Route Method function Description <code>/{groupID:[0-9]+}/roles</code> GET PeopleGroupController::class . \":allRoles\" No description Route Method function Description <code>/{groupID:[0-9]+}/defaultRole</code> POST PeopleGroupController::class . \":defaultRoleForGroup\" No description Route Method function Description <code>/{groupID:[0-9]+}/roles/{roleID:[0-9]+}</code> DELETE PeopleGroupController::class . \":deleteRole\" No description Route Method function Description <code>/{groupID:[0-9]+}/roles</code> POST PeopleGroupController::class . \":roles\" No description Route Method function Description <code>/{groupID:[0-9]+}/setGroupSpecificPropertyStatus</code> POST PeopleGroupController::class . \":setGroupSepecificPropertyStatus\" No description Route Method function Description <code>/{groupID:[0-9]+}/settings/active/{value}</code> POST PeopleGroupController::class . \":settingsActiveValue\" No description Route Method function Description <code>/{groupID:[0-9]+}/settings/email/export/{value}</code> POST PeopleGroupController::class . \":settingsEmailExportVvalue\" No description Route Method function Description <code>/deletefield</code> POST PeopleGroupController::class . \":deleteGroupField\" delete Group Specific property custom field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: PropID as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: Field as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: GroupId as id</li> </ul> Route Method function Description <code>/upactionfield</code> POST PeopleGroupController::class . \":upactionGroupField\" delete Group Specific property custom field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: PropID as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: Field as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: GroupId as id</li> </ul> Route Method function Description <code>/downactionfield</code> POST PeopleGroupController::class . \":downactionGroupField\" delete Group Specific property custom field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: PropID as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: Field as id</li> <li><code>{id}</code>-&gt;<code>int</code> :: GroupId as id</li> </ul> Route Method function Description <code>/{groupID:[0-9]+}/sundayschool</code> GET PeopleGroupController::class . \":groupSundaySchool\" get all sundayschool teachers <ul> <li><code>{id}</code>-&gt;<code>int</code> :: groupID as id</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-people","title":"API \"people\"","text":"<p>in route : \"/api/routes/people/people.php\"</p> Route Method function Description <code>/searchonlyperson/{query}</code> GET PeopleController::class . ':searchonlyperson' Returns a list of the person who's first name or last name matches the :query parameter <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query string ref</li> </ul> Route Method function Description <code>/search/{query}</code> GET PeopleController::class . ':searchpeople' Returns a list of the members/families/groups who's first name or last name matches the :query parameter <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query string ref</li> </ul> Route Method function Description <code>/classifications/all</code> GET PeopleController::class . ':getAllClassifications' Returns all classifications Route Method function Description <code>/person/classification/assign</code> POST PeopleController::class . ':postPersonClassification' Returns all classifications"},{"location":"user-guide/doc-dev/doc-api/api/#api-persons","title":"API \"persons\"","text":"<p>in route : \"/api/routes/people/people-persons.php\"</p> Route Method function Description <code>/search/{query}</code> GET PeoplePersonController::class . \":searchPerson\" Returns a list of the persons who's first name or last name matches the :query parameter <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query string ref</li> </ul> Route Method function Description <code>/cart/view</code> GET PeoplePersonController::class . \":personCartView\" Returns a list of the persons who are in the cart Route Method function Description <code>/volunteers/{personID:[0-9]+}</code> POST PeoplePersonController::class . \":volunteersPerPersonId\" Returns all the volunteers opportunities <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId as id</li> </ul> Route Method function Description <code>/volunteers/delete</code> POST PeoplePersonController::class . \":volunteersDelete\" delete a volunteer opportunity for a user <ul> <li><code>{id1}</code>-&gt;<code>int</code> :: personId as id1</li> <li><code>{id2}</code>-&gt;<code>int</code> :: volunteerOpportunityId as id2</li> </ul> Route Method function Description <code>/volunteers/add</code> POST PeoplePersonController::class . \":volunteersAdd\" Add volunteers opportunity <ul> <li><code>{id1}</code>-&gt;<code>int</code> :: personId as id1</li> <li><code>{id2}</code>-&gt;<code>int</code> :: volID as id2</li> </ul> Route Method function Description <code>/isMailChimpActive</code> POST PeoplePersonController::class . \":isMailChimpActivePerson\" Return if MailChimp is activated <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId as id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: email as ref</li> </ul> Route Method function Description <code>/{personId:[0-9]+}/activate/{status}</code> POST PeoplePersonController::class . \":activateDeacticate\" Return if MailChimp is activated <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId as id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: email as ref</li> </ul> Route Method function Description <code>/personproperties/{personID:[0-9]+}</code> POST PeoplePersonController::class . \":personpropertiesPerPersonId\" Return assigned properties for a person <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/numbers</code> GET PeoplePersonController::class . \":numbersOfBirthDates\" Return Number of BirthDates Route Method function Description <code>/{personId:[0-9]+}/photo</code> GET PeoplePersonController::class . \":photo\" get person photo <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/{personId:[0-9]+}/thumbnail</code> GET PeoplePersonController::class . \":thumbnail\" get person thumbnail <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/{personId:[0-9]+}/photo</code> POST PeoplePersonController::class . \":postPersonPhoto\" Set person photo <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> <li><code>{id}</code>-&gt;<code>string</code> :: imgBase64</li> </ul> Route Method function Description <code>/{personId:[0-9]+}/photo</code> DELETE PeoplePersonController::class . \":deletePersonPhoto\" delete person photo <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/{personId:[0-9]+}/addToCart</code> POST PeoplePersonController::class . \":addPersonToCart\" add person to cart <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/{personId:[0-9]+}</code> DELETE PeoplePersonController::class . \":deletePerson\" delete person <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/deletefield</code> POST PeoplePersonController::class . \":deletePersonField\" delete person field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: orderID</li> <li><code>{id}</code>-&gt;<code>int</code> :: field</li> </ul> Route Method function Description <code>/upactionfield</code> POST PeoplePersonController::class . \":upactionPersonfield\" up action person field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: orderID</li> <li><code>{id}</code>-&gt;<code>int</code> :: field</li> </ul> Route Method function Description <code>/downactionfield</code> POST PeoplePersonController::class . \":downactionPersonfield\" down action person field <ul> <li><code>{id}</code>-&gt;<code>int</code> :: orderID</li> <li><code>{id}</code>-&gt;<code>int</code> :: field</li> </ul> Route Method function Description <code>/duplicate/emails</code> GET PeoplePersonController::class . \":duplicateEmails\" duplicate emails in mailchimp Route Method function Description <code>/NotInMailChimp/emails/{type}</code> GET PeoplePersonController::class . \":notInMailChimpEmails\" not in email for mailchimp Route Method function Description <code>/saveNoteAsWordFile</code> POST PeoplePersonController::class . \":saveNoteAsWordFile\" Export note as word file <ul> <li><code>{id}</code>-&gt;<code>int</code> :: personId</li> <li><code>{id}</code>-&gt;<code>int</code> :: noteId</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#public-api","title":"PUBLIC API","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-data","title":"API \"data\"","text":"<p>in route : \"/api/routes/public/public-data.php\"</p> Route Method function Description <code>/countries</code> GET PublicDataController::class . ':getCountries' get all countries Route Method function Description <code>/countries/</code> GET PublicDataController::class . ':getCountries' get all countries Route Method function Description <code>/countries/{countryCode}/states</code> GET PublicDataController::class . ':getStates' Get all States <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: countryCode</li> </ul> Route Method function Description <code>/countries/{countryCode}/states/</code> GET PublicDataController::class . ':getStates' Get all States <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: countryCode</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-register","title":"API \"register\"","text":"<p>in route : \"/api/routes/public/public-register.php\"</p> Route Method function Description `` POST PublicRegisterController::class . ':registerEcclesiaCRM' register EcclesiaCRM (Admin role) <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: EcclesiaCRMURL</li> <li><code>{ref}</code>-&gt;<code>string</code> :: emailmessage</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#search-management","title":"SEARCH MANAGEMENT","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-search","title":"API \"search\"","text":"<p>in route : \"/api/routes/search.php\"</p> Route Method function Description <code>/{query}</code> GET SearchController::class . ':quickSearch' a search query. Returns all instances of Persons, Families, Groups, Deposits, Checks, Payments that match the search query <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query string as ref</li> <li><code>{ref}</code>-&gt;<code>string</code> :: query</li> </ul> Route Method function Description <code>/getresultbyname/{query}</code> GET SearchController::class . ':getSearchResultByName' Main search for all options : *, famillies, persons, etc ... <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query</li> </ul> Route Method function Description <code>/comboElements/</code> POST SearchController::class . ':comboElements' Combo elements : whe we search by *, you can add options like Gender, Classification, FamilyRole, etc .... <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query</li> </ul> Route Method function Description <code>/getGroupForTypeID/</code> POST SearchController::class . ':getGroupForTypeID' Search for group typ <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: GroupType</li> </ul> Route Method function Description <code>/getGroupRoleForGroupID/</code> POST SearchController::class . ':getGroupRoleForGroupID' Get group role for Group ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Group</li> </ul> Route Method function Description <code>/getresult/</code> POST SearchController::class . ':getSearchResult' Get search result for the main seach view <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query</li> </ul> Route Method function Description <code>/getresult/</code> GET SearchController::class . ':getSearchResult' No description"},{"location":"user-guide/doc-dev/doc-api/api/#side-bar-admin","title":"SIDE BAR ADMIN","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-general-roles","title":"API \"general roles\"","text":"<p>in route : \"/api/routes/sidebar/sidebar-general-roles.php\"</p> Route Method function Description <code>/all/{mode}</code> GET SidebarGeneralRolesController::class . ':getAllGeneralRoles' get all general roles <ul> <li><code>{ref}</code>-&gt;<code>str</code> :: mode 'famroles' 'classes' 'grptypes' 'grptypesSundSchool' 'famcustom' 'groupcustom' ('grproles' dead code)</li> </ul> Route Method function Description <code>/action</code> POST SidebarGeneralRolesController::class . ':generalRoleAssign' set gerneral role for the family, classification, etc ... <ul> <li><code>{ref}</code>-&gt;<code>str</code> :: mode 'famroles' 'classes' 'grptypes' 'grptypesSundSchool' 'famcustom' 'groupcustom' ('grproles' dead code)</li> <li><code>{ref}</code>-&gt;<code>int</code> :: Order</li> <li><code>{id}</code>-&gt;<code>int</code> :: ID as id</li> <li><code>{res}</code>-&gt;<code>str</code> :: Action 'up' 'down'</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-mapicons","title":"API \"mapicons\"","text":"<p>in route : \"/api/routes/sidebar/sidebar-mapicons.php\"</p> Route Method function Description <code>/getall</code> POST SidebarMapIconsController::class . ':getAllMapIcons' get all map icons Route Method function Description <code>/checkOnlyPersonView</code> POST SidebarMapIconsController::class . ':checkOnlyPersonView' check only person view <ul> <li><code>{ref}</code>-&gt;<code>bool</code> :: onlyPersonView</li> <li><code>{ref}</code>-&gt;<code>int</code> :: lstID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: lstOptionID</li> </ul> Route Method function Description <code>/setIconName</code> POST SidebarMapIconsController::class . ':setIconName' set Icon By name <ul> <li><code>{ref}</code>-&gt;<code>str</code> :: name</li> <li><code>{ref}</code>-&gt;<code>int</code> :: lstID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: lstOptionID</li> </ul> Route Method function Description <code>/removeIcon</code> POST SidebarMapIconsController::class . ':removeIcon' remove icon <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: lstID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: lstOptionID</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-menulinks","title":"API \"menulinks\"","text":"<p>in route : \"/api/routes/sidebar/sidebar-menulinks.php\"</p>"},{"location":"user-guide/doc-dev/doc-api/api/#api-properties","title":"API \"properties\"","text":"<p>in route : \"/api/routes/sidebar/sidebar-properties.php\"</p> Route Method function Description <code>/persons/assign</code> POST SidebarPropertiesController::class . ':propertiesPersonsAssign' Assign property to a person <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: PersonId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PropertyId</li> <li><code>{ref}</code>-&gt;<code>string</code> :: PropertyValue</li> </ul> Route Method function Description <code>/persons/unassign</code> DELETE SidebarPropertiesController::class . ':propertiesPersonsUnAssign' Delete : un-assign property to a person <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: PersonId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PropertyId</li> </ul> Route Method function Description <code>/families/assign</code> POST SidebarPropertiesController::class . ':propertiesFamiliesAssign' Assign property to a family <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: FamilyId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PropertyId</li> <li><code>{ref}</code>-&gt;<code>string</code> :: PropertyValue</li> </ul> Route Method function Description <code>/families/unassign</code> DELETE SidebarPropertiesController::class . ':propertiesFamiliesUnAssign' Delete : un-assign property to a family <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: FamilyId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PropertyId</li> </ul> Route Method function Description <code>/groups/assign</code> POST SidebarPropertiesController::class . ':propertiesGroupsAssign' Assign property to a Group <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: GroupId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PropertyId</li> <li><code>{ref}</code>-&gt;<code>string</code> :: PropertyValue</li> </ul> Route Method function Description <code>/groups/unassign</code> DELETE SidebarPropertiesController::class . ':propertiesGroupsUnAssign' Delete : un-assign property to a group <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: GroupId</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PropertyId</li> </ul> Route Method function Description <code>/propertytypelists</code> POST SidebarPropertiesController::class . ':getAllPropertyTypes' get all propery types Route Method function Description <code>/propertytypelists/edit</code> POST SidebarPropertiesController::class . ':editPropertyType' get all datas for a property type ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeId</li> </ul> Route Method function Description <code>/propertytypelists/set</code> POST SidebarPropertiesController::class . ':setPropertyType' set all datas for a property type ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeId</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> </ul> Route Method function Description <code>/propertytypelists/create</code> POST SidebarPropertiesController::class . ':createPropertyType' create property type <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: Class</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> </ul> Route Method function Description <code>/propertytypelists/delete</code> POST SidebarPropertiesController::class . ':deletePropertyType' delete property type <ul> <li><code>{ref}</code>-&gt;<code>id</code> :: typeId</li> </ul> Route Method function Description <code>/typelists/edit</code> POST SidebarPropertiesController::class . ':editProperty' get property datas for type Id <ul> <li><code>{ref}</code>-&gt;<code>id</code> :: typeId</li> </ul> Route Method function Description <code>/typelists/set</code> POST SidebarPropertiesController::class . ':setProperty' get property datas for type Id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeId</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Prompt</li> </ul> Route Method function Description <code>/typelists/delete</code> POST SidebarPropertiesController::class . ':deleteProperty' delete property <ul> <li><code>{ref}</code>-&gt;<code>id</code> :: typeId</li> </ul> Route Method function Description <code>/typelists/create</code> POST SidebarPropertiesController::class . ':createProperty' create property <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: Class</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Prompt</li> </ul> Route Method function Description <code>/typelists/{type}</code> POST SidebarPropertiesController::class . ':getAllProperties' get all properties"},{"location":"user-guide/doc-dev/doc-api/api/#api-roles","title":"API \"roles\"","text":"<p>in route : \"/api/routes/sidebar/sidebar-roles.php\"</p> Route Method function Description <code>/all</code> GET SidebarRolesController::class . ':getAllRoles' get all roles Route Method function Description <code>/persons/assign</code> POST SidebarRolesController::class . ':rolePersonAssign' get all roles <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-volunteeropportunity","title":"API \"volunteeropportunity\"","text":"<p>in route : \"/api/routes/sidebar/sidebar-volunteeropportunity.php\"</p>"},{"location":"user-guide/doc-dev/doc-api/api/#pastoral-care","title":"PASTORAL CARE","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-pastoralcare","title":"API \"pastoralcare\"","text":"<p>in route : \"/api/routes/pastoralcare/pastoralcare.php\"</p> Route Method function Description <code>/</code> POST PastoralCareController::class . ':getAllPastoralCare' Get all pastoral care for User ID (person) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: UserID</li> </ul> Route Method function Description <code>/deletetype</code> POST PastoralCareController::class . ':deletePastoralCareType' delete pastoral care type <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: pastoralCareTypeId</li> </ul> Route Method function Description <code>/createtype</code> POST PastoralCareController::class . ':createPastoralCareType' create pastoral care type <ul> <li><code>{ref}</code>-&gt;<code>bool</code> :: Visible</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> </ul> Route Method function Description <code>/settype</code> POST PastoralCareController::class . ':setPastoralCareType' modify and set pastoral care type <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: pastoralCareTypeId</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: Visible</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Description</li> </ul> Route Method function Description <code>/edittype</code> POST PastoralCareController::class . ':editPastoralCareType' get pastoral care type infos <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: pastoralCareTypeId</li> </ul> Route Method function Description <code>/person/add</code> POST PastoralCareController::class . ':addPastoralCarePerson' create new pastoral care for a person <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPastorId</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: visibilityStatus</li> <li><code>{ref}</code>-&gt;<code>string</code> :: noteText</li> </ul> Route Method function Description <code>/person/delete</code> POST PastoralCareController::class . ':deletePastoralCarePerson' delete pastoral care for a person ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: ID</li> </ul> Route Method function Description <code>/person/getinfo</code> POST PastoralCareController::class . ':getPastoralCareInfoPerson' get pastoral care infos for a person ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: ID</li> </ul> Route Method function Description <code>/person/modify</code> POST PastoralCareController::class . ':modifyPastoralCarePerson' get pastoral care for a person ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: ID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: typeID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPastorId</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: visibilityStatus</li> <li><code>{ref}</code>-&gt;<code>string</code> :: noteText</li> </ul> Route Method function Description <code>/family/add</code> POST PastoralCareController::class . ':addPastoralCareFamily' create new pastoral care for a family <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: familyID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPastorId</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: visibilityStatus</li> <li><code>{ref}</code>-&gt;<code>string</code> :: noteText</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: includeFamMembers</li> </ul> Route Method function Description <code>/family/delete</code> POST PastoralCareController::class . ':deletePastoralCareFamily' delete pastoral care for a family ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: ID</li> </ul> Route Method function Description <code>/family/getinfo</code> POST PastoralCareController::class . ':getPastoralCareInfoFamily' get pastoral care for a family ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: ID</li> </ul> Route Method function Description <code>/family/modify</code> POST PastoralCareController::class . ':modifyPastoralCareFamily' modify pastoral care for a family ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: ID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: typeID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: familyID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentPastorId</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: visibilityStatus</li> <li><code>{ref}</code>-&gt;<code>string</code> :: noteText</li> </ul> Route Method function Description <code>/members</code> POST PastoralCareController::class . ':pastoralcareMembersDashboard' get all pastoral cares for all the members in the sPastoralcarePeriod (see for this the settings infos) Route Method function Description <code>/personNeverBeenContacted</code> POST PastoralCareController::class . ':personNeverBeenContacted' get the persons never been contacted sPastoralcarePeriod (see for this the settings infos) Route Method function Description <code>/familyNeverBeenContacted</code> POST PastoralCareController::class . ':familyNeverBeenContacted' get the families never been contacted sPastoralcarePeriod (see for this the settings infos) Route Method function Description <code>/singleNeverBeenContacted</code> POST PastoralCareController::class . ':singleNeverBeenContacted' get the single persons never been contacted sPastoralcarePeriod (see for this the settings infos) Route Method function Description <code>/retiredNeverBeenContacted</code> POST PastoralCareController::class . ':retiredNeverBeenContacted' get the retired persons never been contacted sPastoralcarePeriod (see for this the settings infos) Route Method function Description <code>/youngNeverBeenContacted</code> POST PastoralCareController::class . ':youngNeverBeenContacted' get the young persons never been contacted sPastoralcarePeriod (see for this the settings infos) Route Method function Description <code>/getPersonByClassification</code> POST PastoralCareController::class . ':getPersonByClassificationPastoralCare' get the young persons never been contacted sPastoralcarePeriod (see for this the settings infos) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeID (1 : person, 2: family, 3: retired, 4: young person, 5: single person</li> </ul> Route Method function Description <code>/getPersonByClassification/{type:[0-9]+}</code> POST PastoralCareController::class . ':getPersonByClassificationPastoralCare' get the persons never been reached for the last period (sPastoralcarePeriod) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: type (1: yet contacted)</li> </ul> Route Method function Description <code>/getlistforuser/{UserID:[0-9]+}</code> GET PastoralCareController::class . ':getPastoralCareListForUser' get the pastoral care user in period for pastor current user ID in current period (sPastoralcarePeriod) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: UserID</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#sunday-school","title":"SUNDAY SCHOOL","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-sundayschool","title":"API \"sundayschool\"","text":"<p>in route : \"/api/routes/sundayschool.php\"</p> Route Method function Description <code>/getallstudents/{groupId:[0-9]+}</code> POST SundaySchoolController::class . ':getallstudentsForGroup' Get all students for Group ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: groupId</li> </ul> Route Method function Description <code>/getAllGendersForDonut/{groupId:[0-9]+}</code> POST SundaySchoolController::class . ':getAllGendersForDonut' Get all genders for Group ID (to draw the donut) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: groupId</li> </ul> Route Method function Description <code>/getAllStudentsForChart/{groupId:[0-9]+}</code> POST SundaySchoolController::class . ':getAllStudentsForChart' Get all students for Group ID (to draw the chart) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: groupId</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#system","title":"SYSTEM","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-custom-fields","title":"API \"custom-fields\"","text":"<p>in route : \"/api/routes/system/system-custom-fields.php\"</p> Route Method function Description <code>/person</code> GET SystemCustomFieldController::class . ':getPersonFieldsByType' Get person field type (public) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeId</li> </ul> Route Method function Description <code>/person/</code> GET SystemCustomFieldController::class . ':getPersonFieldsByType' Get person field type (public) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: typeId</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-database","title":"API \"database\"","text":"<p>in route : \"/api/routes/system/system-database.php\"</p> Route Method function Description <code>/restore</code> POST SystemBackupRestoreController::class . ':restore' backup crm (admin) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: iArchiveType</li> <li><code>{ref}</code>-&gt;<code>int</code> :: iRemote</li> <li><code>{ref}</code>-&gt;<code>int</code> :: iArchiveType</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: bEncryptBackup,</li> <li><code>{ref}</code>-&gt;<code>string</code> :: password</li> <li><code>{ref}</code>-&gt;<code>string</code> :: restoreFile</li> </ul> Route Method function Description <code>/download/{filename}</code> GET SystemBackupRestoreController::class . ':download' Download update (admin) <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: filename</li> </ul> Route Method function Description <code>/people/clear</code> DELETE SystemBackupRestoreController::class . ':clearPeopleTables' Clear all people from the database (admin) <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: filename</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-gdrp","title":"API \"gdrp\"","text":"<p>in route : \"/api/routes/system/system-gdrp.php\"</p> Route Method function Description <code>/</code> POST SystemGDRPController::class . ':getAllGdprNotes' Get all GDPR notes for each custom fields Route Method function Description <code>/setComment</code> POST SystemGDRPController::class . ':setGdprComment' Set GDPR note (comment) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: custom_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: comment</li> <li><code>{ref}</code>-&gt;<code>int</code> :: type 'person', 'personCustom', 'personProperty', 'family', 'familyCustom'</li> </ul> Route Method function Description <code>/removeperson</code> POST SystemGDRPController::class . ':removePersonGdpr' remove a person for gdpr by person ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: personId</li> </ul> Route Method function Description <code>/removeallpersons</code> POST SystemGDRPController::class . ':removeAllPersonsGdpr' Remove all persons Route Method function Description <code>/removefamily</code> POST SystemGDRPController::class . ':removeFamilyGdpr' remove a fmaily for gdpr by family ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: familyId</li> </ul> Route Method function Description <code>/removeallfamilies</code> POST SystemGDRPController::class . ':removeAllFamiliesGdpr' Remove all families"},{"location":"user-guide/doc-dev/doc-api/api/#api-individual-settings","title":"API \"individual settings\"","text":"<p>in route : \"/api/routes/system/system-setting-individual.php\"</p> Route Method function Description <code>/get2FA</code> POST SystemSettingsIndividualController::class . ':get2FA' Get 2FA key Route Method function Description <code>/verify2FA</code> POST SystemSettingsIndividualController::class . ':verify2FA' Verify 2FA <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: code</li> </ul> Route Method function Description <code>/remove2FA</code> POST SystemSettingsIndividualController::class . ':remove2FA' Remove 2FA for session user"},{"location":"user-guide/doc-dev/doc-api/api/#api-issues","title":"API \"issues\"","text":"<p>in route : \"/api/routes/system/system-issues.php\"</p> Route Method function Description <code>/issues</code> POST SystemIssueController::class . ':issues' Sending an issue (public) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: iArchiveType</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-synchronize","title":"API \"synchronize\"","text":"<p>in route : \"/api/routes/system/system-synchronize.php\"</p> Route Method function Description <code>/page</code> POST SystemSynchronizeController::class . ':synchronize' Returns the dashboard items in function of the current page name : for CRMJsom.js <ul> <li><code>{page}</code>-&gt;<code>string</code> :: current page name</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-system","title":"API \"system\"","text":"<p>in route : \"/api/routes/system/system.php\"</p> Route Method function Description <code>/csp-report</code> POST SystemController::class . ':cspReport' send csp report Route Method function Description <code>/deletefile</code> POST SystemController::class . ':deleteFile' delete a file <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: path</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-systemupgrade","title":"API \"systemupgrade\"","text":"<p>in route : \"/api/routes/system/system-system-upgrade.php\"</p> Route Method function Description <code>/downloadlatestrelease</code> GET SystemUpgradeController::class . ':downloadlatestrelease' Download latest release Route Method function Description <code>/doupgrade</code> POST SystemUpgradeController::class . ':doupgrade' Do upgrade system to latest <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: fullPath</li> <li><code>{ref}</code>-&gt;<code>string</code> :: sha1</li> </ul> Route Method function Description <code>/isUpdateRequired</code> POST SystemUpgradeController::class . ':isUpdateRequired' Test if update is required : return"},{"location":"user-guide/doc-dev/doc-api/api/#api-timerjobs","title":"API \"timerjobs\"","text":"<p>in route : \"/api/routes/system/system-timerjobs.php\"</p> Route Method function Description <code>/run</code> POST TimerJobsController::class . ':runTimerJobs' get all running timer jobs"},{"location":"user-guide/doc-dev/doc-api/api/#user-profile","title":"USER PROFILE","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-userrole","title":"API \"userrole\"","text":"<p>in route : \"/api/routes/user/user-role.php\"</p> Route Method function Description <code>/add</code> POST UserRoleController::class . ':addUserRole' Add new role by name, global etc ... Route Method function Description <code>/get</code> POST UserRoleController::class . ':getUserRole' Get role by name, global etc ... Route Method function Description <code>/rename</code> POST UserRoleController::class . ':renameUserRole' Rename role id by name Route Method function Description <code>/getall</code> POST UserRoleController::class . ':getAllUserRoles' Get all user roles Route Method function Description <code>/delete</code> POST UserRoleController::class . ':deleteUserRole' delete user role by id"},{"location":"user-guide/doc-dev/doc-api/api/#api-users","title":"API \"users\"","text":"<p>in route : \"/api/routes/user/user-users.php\"</p> Route Method function Description <code>/{userId:[0-9]+}/password/reset</code> POST UserUsersController::class . ':passwordReset' Reset password to random one Route Method function Description <code>/controlAccount</code> POST UserUsersController::class . ':controlAccount' Apply role ID to user ID Route Method function Description <code>/exitControlAccount</code> POST UserUsersController::class . ':exitControlAccount' Exit account control (admin) Route Method function Description <code>/lockunlock</code> POST UserUsersController::class . ':lockUnlock' Lock/unlock account (admin) Route Method function Description <code>/showsince</code> POST UserUsersController::class . ':showSince' Show since (every user) Route Method function Description <code>/showto</code> POST UserUsersController::class . ':showTo' Show to (every user) Route Method function Description <code>/{userId:[0-9]+}/login/reset</code> POST UserUsersController::class . ':loginReset' Reset login count to setFailedLogins(0) (Admin) Route Method function Description <code>/{userId:[0-9]+}</code> DELETE UserUsersController::class . ':deleteUser' Delete user account (Admin) Route Method function Description <code>/2fa/remove</code> POST UserUsersController::class . ':userstwofaremove' Remove 2FA code (Admin) Route Method function Description <code>/2fa/pending</code> POST UserUsersController::class . ':userstwofapending' pending 2FA code (Admin)"},{"location":"user-guide/doc-dev/doc-api/api/#plugins","title":"PLUGINS","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-plugins-global-management","title":"API \"Plugins (global management)\"","text":"<p>in route : \"/api/routes/plugins/plugins.php\"</p> Route Method function Description <code>/activate</code> POST PluginsController::class . ':activate' Activate a plugin (admin role) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Id</li> </ul> Route Method function Description <code>/deactivate</code> POST PluginsController::class . ':deactivate' Deactivate a plugin (admin role) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Id</li> </ul> Route Method function Description <code>/</code> DELETE PluginsController::class . ':remove' Remove a plugin (admin role) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Id</li> </ul> Route Method function Description <code>/add</code> POST PluginsController::class . ':add' Add a plugin (admin role), post $_FILES['pluginFile'] Route Method function Description <code>/addDashboardPlaces</code> POST PluginsController::class . ':addDashboardPlaces' Place dashboard items plugins on the dashboard <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: dashBoardItems</li> </ul> Route Method function Description <code>/removeFromDashboard</code> POST PluginsController::class . ':removeFromDashboard' Add a dashboard plugin from the dashboard by his name <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: name</li> </ul> Route Method function Description <code>/collapseFromDashboard</code> POST PluginsController::class . ':collapseFromDashboard' Remove a dashboard plugin from the dashboard by his name <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: name</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-meeting-plugin","title":"API \"meeting (plugin)\"","text":"<p>in route : \"/Plugins/MeetingJitsi/api/plgnapi.php\"</p> Route Method function Description <code>/</code> GET MeetingController::class . ':getAllMettings' No description Route Method function Description <code>/getLastMeeting</code> GET MeetingController::class . ':getLastMeeting' No description Route Method function Description <code>/createMeetingRoom</code> POST MeetingController::class . ':createMeetingRoom' No description Route Method function Description <code>/selectMeetingRoom</code> POST MeetingController::class . ':selectMeetingRoom' No description Route Method function Description <code>/deleteAllMeetingRooms</code> DELETE MeetingController::class . ':deleteAllMeetingRooms' No description Route Method function Description <code>/changeSettings</code> POST MeetingController::class . ':changeSettings' No description"},{"location":"user-guide/doc-dev/doc-api/api/#others","title":"OTHERS","text":""},{"location":"user-guide/doc-dev/doc-api/api/#api-cart","title":"API \"Cart\"","text":"<p>in route : \"/api/routes/cart.php\"</p> Route Method function Description <code>/</code> GET CartController::class . ':getAllPeopleInCart' Get all people in Cart Route Method function Description <code>/</code> POST CartController::class . ':cartOperation' cart operations <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: Persons arrray of ids (possible value)</li> <li><code>{id}</code>-&gt;<code>int</code> :: Family (ID) of the person (possible value)</li> <li><code>{id}</code>-&gt;<code>array</code> :: Families (array of ids) (possible value)</li> <li><code>{id}</code>-&gt;<code>int</code> :: Group id (possible value)</li> <li><code>{id}</code>-&gt;<code>int</code> :: removeFamily id (possible value)</li> <li><code>{id}</code>-&gt;<code>array</code> :: removeFamilies (array of ids) (possible value)</li> <li><code>{id}</code>-&gt;<code>int</code> :: studentGroup id</li> <li><code>{id}</code>-&gt;<code>int</code> :: teacherGroup id</li> </ul> Route Method function Description <code>/interectPerson</code> POST CartController::class . ':cartIntersectPersons' Get user info by id <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: Persons id in array ref (possible value)</li> </ul> Route Method function Description <code>/emptyToGroup</code> POST CartController::class . ':emptyCartToGroup' Empty cart to a group <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: groupID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: groupRoleID</li> </ul> Route Method function Description <code>/emptyToEvent</code> POST CartController::class . ':emptyCartToEvent' Empty cart to event <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: eventID</li> </ul> Route Method function Description <code>/emptyToNewGroup</code> POST CartController::class . ':emptyCartToNewGroup' Empty cart to a new group <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: groupName</li> </ul> Route Method function Description <code>/removeGroup</code> POST CartController::class . ':removeGroupFromCart' Remove all group members Ids from the cart <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Group (Id)</li> </ul> Route Method function Description <code>/removeGroups</code> POST CartController::class . ':removeGroupsFromCart' Remove all groups members Ids from the cart <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: Groups (array of group Id)</li> </ul> Route Method function Description <code>/removeStudentGroup</code> POST CartController::class . ':removeStudentsGroupFromCart' Remove students by group Id from the cart <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Group (group Id)</li> </ul> Route Method function Description <code>/removeTeacherGroup</code> POST CartController::class . ':removeTeachersGroupFromCart' Remove teachers by group Id from the cart <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: Group (group Id)</li> </ul> Route Method function Description <code>/addAllStudents</code> POST CartController::class . ':addAllStudentsToCart' Add all students to cart Route Method function Description <code>/addAllTeachers</code> POST CartController::class . ':addAllTeachersToCart' Add all teachers to cart Route Method function Description <code>/removeAllStudents</code> POST CartController::class . ':removeAllStudentsFromCart' Remove all students from the cart Route Method function Description <code>/removeAllTeachers</code> POST CartController::class . ':removeAllTeachersFromCart' Remove all teachers from the cart Route Method function Description <code>/delete</code> POST CartController::class . ':deletePersonCart' Remove persons from the cart <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: Persons (array of persons ids)</li> </ul> Route Method function Description <code>/deactivate</code> POST CartController::class . ':deactivatePersonCart' De-activate persons from the cart <ul> <li><code>{ref}</code>-&gt;<code>array</code> :: Persons (array of persons ids)</li> </ul> Route Method function Description <code>/</code> DELETE CartController::class . ':removePersonCart' Extract persons in the cart to vcard format"},{"location":"user-guide/doc-dev/doc-api/api/#api-fundraiser","title":"API \"fundraiser\"","text":"<p>in route : \"/api/routes/fundraiser/fundraiser.php\"</p> Route Method function Description <code>/{FundRaiserID:[0-9]+}</code> POST FundraiserController::class . ':getAllFundraiserForID' Get All fundraiser for FundRaiserID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: FundRaiserID</li> </ul> Route Method function Description <code>/replicate</code> POST FundraiserController::class . ':replicateFundraiser' Duplicate fundraiser <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: DonatedItemID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: count</li> </ul> Route Method function Description <code>/donatedItemSubmit</code> POST FundraiserController::class . ':donatedItemSubmitFundraiser' create or update DonateItem with params <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: currentFundraiser</li> <li><code>{ref}</code>-&gt;<code>int</code> :: currentDonatedItemID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Item</li> <li><code>{ref}</code>-&gt;<code>int</code> :: Multibuy</li> <li><code>{ref}</code>-&gt;<code>int</code> :: Donor</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Title</li> <li><code>{ref}</code>-&gt;<code>html</code> :: Description</li> <li><code>{ref}</code>-&gt;<code>float</code> :: EstPrice</li> <li><code>{ref}</code>-&gt;<code>float</code> :: MaterialValue</li> <li><code>{ref}</code>-&gt;<code>float</code> :: MinimumPrice</li> <li><code>{ref}</code>-&gt;<code>int</code> :: Buyer</li> <li><code>{ref}</code>-&gt;<code>float</code> :: SellPrice</li> <li><code>{ref}</code>-&gt;<code>string</code> :: PictureURL</li> </ul> Route Method function Description <code>/donateditem/currentpicture</code> POST FundraiserController::class . ':donatedItemCurrentPicture' Return current url picture for the DonateItem ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: DonatedItemID</li> </ul> Route Method function Description <code>/donateditem</code> DELETE FundraiserController::class . ':deleteDonatedItem' Delete donatedItem with the params below <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: FundRaiserID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: DonatedItemID</li> </ul> Route Method function Description <code>/donatedItem/submit/picture</code> POST FundraiserController::class . ':donatedItemSubmitPicture' Submit picture for the Donated Item Id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: DonatedItemID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: pathFile</li> </ul> Route Method function Description <code>/findFundRaiser/{fundRaiserID:[0-9]+}/{startDate}/{endDate}</code> POST FundraiserController::class . ':findFundRaiser' Find a fund raiser by Id and in range of dates <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundRaiserID</li> <li><code>{ref}</code>-&gt;<code>string</code> :: startDate</li> <li><code>{ref}</code>-&gt;<code>string</code> :: startDate</li> </ul> Route Method function Description <code>/paddlenum</code> DELETE FundraiserController::class . ':deletePaddleNum' delete PaddleNum <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundraiserID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: pnID</li> </ul> Route Method function Description <code>/paddlenum/list/{fundRaiserID:[0-9]+}</code> POST FundraiserController::class . ':getPaddleNumList' Get PaddleNum list by fundraiser ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundRaiserID</li> </ul> Route Method function Description <code>/paddlenum/add/donnors</code> POST FundraiserController::class . ':addDonnors' Add all Donnors from the fundraiserID and create associated PaddleNums <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundraiserID</li> </ul> Route Method function Description <code>/paddlenum/persons/all/{fundRaiserID:[0-9]+}</code> GET FundraiserController::class . ':getAllPersonsNum' Returns a list of all the persons who are in the cart <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundRaiserID</li> </ul> Route Method function Description <code>/paddlenum/add</code> POST FundraiserController::class . ':addPaddleNum' Add PaddleNum <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundraiserID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PerID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PaddleNumID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: Num</li> </ul> Route Method function Description <code>/paddlenum/info</code> POST FundraiserController::class . ':paddleNumInfo' Get PaddleNum infos <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: fundraiserID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: PerID</li> <li><code>{ref}</code>-&gt;<code>int</code> :: Num</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-geocoder","title":"API \"geocoder\"","text":"<p>in route : \"/api/routes/geocoder.php\"</p> Route Method function Description <code>/address</code> POST GeocoderController::class . ':getGeoLocals' get address <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: address</li> </ul> Route Method function Description <code>/address/</code> POST GeocoderController::class . ':getGeoLocals' get address"},{"location":"user-guide/doc-dev/doc-api/api/#api-kiosks","title":"API \"kiosks\"","text":"<p>in route : \"/api/routes/kiosks.php\"</p> Route Method function Description <code>/</code> GET KiosksController::class . ':getKioskDevices' Get all Kiosk devices <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: address</li> </ul> Route Method function Description <code>/allowRegistration</code> POST KiosksController::class . ':allowDeviceRegistration' Allow a Kiosk registration Route Method function Description <code>/{kioskId:[0-9]+}/reloadKiosk</code> POST KiosksController::class . ':reloadKiosk' Reload kiosk for kioskId <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: kioskId</li> </ul> Route Method function Description <code>/{kioskId:[0-9]+}/identifyKiosk</code> POST KiosksController::class . ':identifyKiosk' Identify Kiosk by id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: kioskId</li> </ul> Route Method function Description <code>/{kioskId:[0-9]+}/acceptKiosk</code> POST KiosksController::class . ':acceptKiosk' Accept Kiosk by id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: kioskId</li> </ul> Route Method function Description <code>/{kioskId:[0-9]+}/setAssignment</code> POST KiosksController::class . ':setKioskAssignment' Set Kiosk assignement <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: kioskId</li> </ul> Route Method function Description <code>/{kioskId:[0-9]+}</code> DELETE KiosksController::class . ':deleteKiosk' Delete kiosk by id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: kioskId</li> </ul>"},{"location":"user-guide/doc-dev/doc-api/api/#api-mailchimp","title":"API \"mailchimp\"","text":"<p>in route : \"/api/routes/mailchimp.php\"</p> Route Method function Description <code>/search/{query}</code> GET MailchimpController::class . ':searchList' Search in the list field : *, family name, group, etc ... <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: query</li> </ul> Route Method function Description <code>/list/{listID}</code> GET MailchimpController::class . ':oneList' get one list info (['MailChimpList' =&gt; $list,'MailChimpCampaign' =&gt; $campaign,'membersCount' =&gt; count($mailchimp-&gt;getListMembersFromListId($args['listID']))]) <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: listID</li> </ul> Route Method function Description <code>/lists</code> GET MailchimpController::class . ':lists' get all lists ['MailChimpLists' =&gt; $lists,'MailChimpCampaigns' =&gt; $campaigns, 'firstLoaded' =&gt; !$isLoaded, 'isActive' =&gt; $isActive] <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: listID</li> </ul> Route Method function Description <code>/listmembers/{listID}</code> GET MailchimpController::class . ':listmembers' get all members list for listID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: listID</li> </ul> Route Method function Description <code>/createlist</code> POST MailchimpController::class . ':createList' create a list <ul> <li><code>{ref}</code>-&gt;<code>string</code> :: ListTitle</li> <li><code>{ref}</code>-&gt;<code>string</code> :: Subject</li> <li><code>{ref}</code>-&gt;<code>string</code> :: PermissionReminder</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: ArchiveBars</li> <li><code>{ref}</code>-&gt;<code>bool</code> :: Status (private | public)</li> </ul> Route Method function Description <code>/modifylist</code> POST MailchimpController::class . ':modifyList' modify list by list id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: name</li> <li><code>{ref}</code>-&gt;<code>string</code> :: subject</li> <li><code>{ref}</code>-&gt;<code>string</code> :: permission_reminder</li> </ul> Route Method function Description <code>/deleteallsubscribers</code> POST MailchimpController::class . ':deleteallsubscribers' delete all subscribers <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> </ul> Route Method function Description <code>/deletelist</code> POST MailchimpController::class . ':deleteList' delete list by list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> </ul> Route Method function Description <code>/list/removeTag</code> POST MailchimpController::class . ':removeTag' remove TagID in the List by list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>int</code> :: tag_ID</li> </ul> Route Method function Description <code>/list/removeAllTagsForMembers</code> POST MailchimpController::class . ':removeAllTagsForMembers' remove all tags in list ID by an array of emails <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>array</code> :: emails</li> </ul> Route Method function Description <code>/list/addTag</code> POST MailchimpController::class . ':addTag' add a tag to all members by emails array or create a tag (-1) by name for all emails array. <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: tag (could be -1 : in this case, you'll create a new tag)</li> <li><code>{ref}</code>-&gt;<code>string</code> :: name (in case tag is -1)</li> <li><code>{ref}</code>-&gt;<code>array</code> :: emails</li> </ul> Route Method function Description <code>/list/getAllTags</code> POST MailchimpController::class . ':getAllTags' get all tags for for list by id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> </ul> Route Method function Description <code>/list/removeTagForMembers</code> POST MailchimpController::class . ':removeTagForMembers' remove tag for all members (emails array) in list Id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>int</code> :: tag</li> <li><code>{ref}</code>-&gt;<code>array</code> :: emails</li> </ul> Route Method function Description <code>/campaign/actions/create</code> POST MailchimpController::class . ':campaignCreate' Create a campaign for tagID with subject etc .... <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: subject</li> <li><code>{ref}</code>-&gt;<code>string</code> :: title</li> <li><code>{ref}</code>-&gt;<code>string</code> :: tagId</li> </ul> Route Method function Description <code>/campaign/actions/delete</code> POST MailchimpController::class . ':campaignDelete' Delete campaign by id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: campaign_id</li> </ul> Route Method function Description <code>/campaign/actions/send</code> POST MailchimpController::class . ':campaignSend' Send campaign by id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: campaign_id</li> </ul> Route Method function Description <code>/campaign/actions/save</code> POST MailchimpController::class . ':campaignSave' Save a campaign <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: campaign_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: subject</li> <li><code>{ref}</code>-&gt;<code>string</code> :: oldStatus (\"save\" | \"paused\" | scheduled)</li> </ul> Route Method function Description <code>/campaign/{campaignID}/content</code> GET MailchimpController::class . ':campaignContent' Get html contect of a campaign <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: campaignID</li> </ul> Route Method function Description <code>/status</code> POST MailchimpController::class . ':statusList' update the list status <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: status (\"save\" | \"paused\" | scheduled)</li> <li><code>{ref}</code>-&gt;<code>string</code> :: email</li> </ul> Route Method function Description <code>/suppress</code> POST MailchimpController::class . ':suppress' delete email in the list id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>string</code> :: email (one email)</li> </ul> Route Method function Description <code>/suppressMembers</code> POST MailchimpController::class . ':suppressMembers' delete emails in the list id <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>array</code> :: array of emails</li> </ul> Route Method function Description <code>/addallnewsletterpersons</code> POST MailchimpController::class . ':addallnewsletterpersons' add all members checked by newsletter checkbox in the CRM <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> </ul> Route Method function Description <code>/addallpersons</code> POST MailchimpController::class . ':addallpersons' add all persons in the CRM who have a email or work email to list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> </ul> Route Method function Description <code>/addperson</code> POST MailchimpController::class . ':addPerson' add one person ID to list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>int</code> :: personID</li> </ul> Route Method function Description <code>/addfamily</code> POST MailchimpController::class . ':addFamily' add one family ID to list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>int</code> :: familyID</li> </ul> Route Method function Description <code>/addAllFamilies</code> POST MailchimpController::class . ':addAllFamilies' add all families to list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> </ul> Route Method function Description <code>/addgroup</code> POST MailchimpController::class . ':addGroup' add all group members by ID to list ID <ul> <li><code>{ref}</code>-&gt;<code>int</code> :: list_id</li> <li><code>{ref}</code>-&gt;<code>int</code> :: fgroupID</li> </ul> Route Method function Description <code>/testConnection</code> POST MailchimpController::class . ':testEmailConnectionMVC' Test if connection is available"},{"location":"user-guide/doc-dev/doc-plugins/intro/","title":"Introduction","text":"<p>EcclesiaCRM supports plugins with version 8.0.0.</p> <p>There are two different types of plugins:</p>"},{"location":"user-guide/doc-dev/doc-plugins/intro/#global-plugins","title":"Global plugins","text":"<ul> <li>They are located in the side toolbar tree</li> <li>They allow you to extend the potential of the CRM and make it an extensible tool.</li> <li>Two tools have been created for this purpose (Jitsi and the event flow)</li> </ul>"},{"location":"user-guide/doc-dev/doc-plugins/intro/#home-page-plugins-the-dashboard","title":"Home page plugins (the dashboard)","text":"<ul> <li>A whole series of plugins have been created (News, Today's birthdays, Notes, etc ...)</li> <li>they allow you to manage a home page that can be customized by drag and drop</li> <li>it is possible to delete and manage them.</li> </ul>"},{"location":"user-guide/doc-dev/doc-plugins/intro/#a-plugin-manager","title":"A plugin manager","text":"<ul> <li>it will allow you to install</li> <li>activate them</li> <li>to delete them</li> </ul>"},{"location":"user-guide/doc-dev/doc-plugins/intro/#an-advanced-user-manager","title":"An advanced user manager","text":"<ul> <li>it is possible to assign by user a plugin and to fix its rights to admin or to a simple user (see for that the News plugin).</li> <li>for the management of the rights see for that the user guide in the part administrator administrator.</li> </ul>"},{"location":"user-guide/doc-dev/doc-plugins/start/","title":"To get started","text":""},{"location":"user-guide/doc-dev/doc-plugins/start/#to-generate-the-architecture-of-a-plugin","title":"To generate the architecture of a plugin","text":"<p>A shell command has been developed to facilitate the work: createPluginArch.sh</p>"},{"location":"user-guide/doc-dev/doc-plugins/start/#to-create-a-plugin","title":"To create a plugin","text":"<p>Read carrefully before starting</p> <ul> <li>the routes for each plugin are planned and are included in the complete management of the routes in api/plgnapi.php (see below) and are planned to be managed via controllers in the core/APIControllers path.</li> <li>for the views of the routes are predefined also v2/routes/v2route.php (they are possibly linked to your own controllers core/VIEWControllers).</li> <li>this mechanism guarantees maximum security.</li> <li>it is imperative to follow the fact that each plugin must have a signature which is validated by the crm (see for that the plugin documentation).</li> </ul> <p>You have to use this Script</p> <pre><code>bash createPluginArch.sh *NameOfPlugin*\n</code></pre> <p>This script will create NameOfPlugin in the Plugins directory of the src directory.</p> <p>1. The architecture is of the form</p> <pre><code>api/ // internal api management\n    plgnapi.php // we must create our own routes here\n    (managed by the CRM directly)\ncore/ // here we can manage all the models\n    APIControllers // to define the controller called in plgnapi.php).\n    model // example for propel orm\n    VIEWControllers // for the views of the v2/routes part\n    ...\n    // for example\n    Service\n    views\nident/ // for an access to an external api (optional)\n    routes/ // called by the crm directly\n    templates/ // called by the route part\nlocale/\n    js/ // js translation code\n    textdomain/ // for gettext translation of php code\n    index.html\nmysql/ // setting up mysql files\n    index.html // protection file\n    Install.sql // sql script to create the database\n                    // called by the plugin manager\n    Uninstall.sql // to uninstall the plugin, it's up to you not to forget anything\n    upgrade.json // this part allows to manage upgrades (under development)\nskin/\n    css/ // all css classes called by the crm\n    js/ // all the js code called by the crm\nv2/ // MVC for views, models and controller : mandatory for dashboard plugin\n    routes/ // called by the crm directly\n        v2route.php\n    templates/\n                    // templates\nconfig.json\nsignatures.json\n</code></pre> <p>The signature is created via the tool provided by the CRM : grunt genPluginsSignatures.</p> <p>2. We can edit it right away: config.json</p> <pre><code>   {\n       \"Name\": \"EventWorkflow\",\n       \"copyrights\": \"Philippe Logel \u00a9 EcclesiaCRM Team\",\n       \"version\": \"1.0\",\n       \"Description\": \"Plugin to manage your events\",\n       \"infos\": \"iMathGeo &amp; Softwares\",\n       \"url_infos\": \"https://www.ecclesiacrm.com\",\n       \"url_docs\": \"https://\",\n       \"Settings_url\": \"v2/eventworkflow/settings\",\n       \"Details\": \"https://url;iframe=true&amp;amp;width=772&amp;amp;height=549\"\n   }\n</code></pre> <ul> <li>This part is crucial for the update system (via the version number)</li> <li>The version number must always be of the form x.y.</li> </ul> <p>3. Special rights</p> <ul> <li>It is possible to set admin rights or not</li> </ul>"},{"location":"user-guide/doc-dev/doc-plugins/start/#creation-of-a-classic-plugin","title":"Creation of a classic plugin","text":"<p>1. Concerning injection into the database in the \"plugin\" table</p> <p>In the database Put the plugin, we must set</p> <ul> <li><code>plgn_Category</code> will allow to put the entry of the plugin in the menu on the left in the Personal, RGPD, Etc. .... the options are   <code>'Personal', 'GDPR', 'Events', 'PEOPLE', 'GROUP', 'SundaySchool', 'Meeting', 'PastoralCare', 'Mail', 'Deposit', 'Funds', 'FreeMenu', 'EDRive'</code> -</li> <li>a <code>plgn_Description</code> description, e.g.: 'Plugin to show the current connected users</li> <li>a version <code>`plgn_version</code> `` to e.g. '1.0</li> <li>the prefix type for the entries <code>`plgn_prefix</code> to 'jm_'</li> <li><code>plgn_position``</code>can take the values <code>'inside_category_menu'', ``after_category_menu''</code> (very clear).</li> </ul> <p>Here is a complete example in the <code>MeetingJitsi</code> plugin</p> <pre><code>INSERT INTO `plugin` ( `plgn_Name`, `plgn_Description`, `plgn_Category`, `plgn_image`, `plgn_installation_path`, `plgn_activ`, `plgn_version`, `plgn_prefix`, `plgn_position`)\nVALUES ('MeetingJitsi', 'Plugin for jitsi Meeting', 'Meeting', NULL, '', '0', '1.0', 'jm_', 'after_category_menu');\n</code></pre> <p>To create additional menu bar entries in the <code>plugin_menu_bar</code> table, we must</p> <ul> <li>set the name of the plugin in <code>plgn_mb_plugin_name</code> for example to <code>MeetingJitsi</code>.</li> <li>The name of the menu item: <code>`plgn_mb_plugin_Display_name</code> to ``Settings'' for example</li> <li>the url <code>`plgn_mb_url</code> ``to for example 'v2/meeting/dashboard</li> <li>the icon <code>`plgn_bm_icon</code> at 'fas fa-cogs</li> <li>Then a security option <code>`plgn_bm_grp_sec``</code>to the possible values of roles defined in the crm, for example 'usr_admin'</li> </ul> <pre><code>usr_AddRecords,\nusr_EditRecords,\nusr_DeleteRecords,\nusr_ShowCart,\nusr_ShowMap,\nusr_EDrive,\nusr_MenuOptions,\nusr_ManageGroups,\nusr_ManageCalendarResources,\nusr_HtmlSourceEditor,\nusr_Finance,\nusr_Notes,\nusr_EditSelf,\nusr_Canvasser,\nusr_Admin,\nusr_showMenuQuery,\nusr_CanSendEmail,\nusr_ExportCSV,\nusr_CreateDirectory,\nusr_ExportSundaySchoolPDF,\nusr_ExportSundaySchoolCSV,\nusr_MainDashboard,\nusr_SeePrivacyData,\nusr_MailChimp,\nusr_GDRP_DPO,\nusr_PastoralCare\n</code></pre> <p>Here is a complete example</p> <pre><code>-- insert the menu item\n-- the first one is the main menu !!!\nINSERT INTO `plugin_menu_bar` (`plgn_mb_plugin_name`, `plgn_mb_plugin_Display_name`, `plgn_mb_url`, `plgn_bm_icon`, `plgn_bm_grp_sec`) VALUES\n('MeetingJitsi', 'Jitsi', 'v2/meeting/dashboard', 'fas fa-video', ''),\n('MeetingJitsi', 'Dashboard', 'v2/meeting/dashboard', 'fas fa-tachometer-alt', ''),\n('MeetingJitsi', 'Settings', 'v2/meeting/settings', 'fas fa-cogs', 'usr_admin');\n</code></pre> <p>2. Attention, it must follow the following recommendations</p> <ul> <li>You can set the place and in the menu or after the menu (type seen above)</li> <li>put the css in : skin/css</li> <li>put the js in : skin/js</li> <li>for the api in api/plgnapi.php (you have to put it in, it secures the CRM)</li> <li>for the php code of the views, it is better to put it in v2/templates/</li> <li>If you want to use the MVC design pattern for the views, v2route.php is ready in v2/routes/</li> <li>for your personal classes you can go in core/</li> <li>for propel classes and models everything is in core/model</li> <li>etc ...</li> </ul> <p>3. Be careful with the autoload for propel or personal classes:</p> <pre><code>// we've to load the model to make sure the plugin will work\nspl_autoload_register(function ($className) {\n    include_once str_replace(array('Plugins\\Service', '\\'), array(__DIR__.'/../../core/Service', '/'), $className) . '.php';\n    include_once str_replace(array('PluginStore', '\\\\'), array(__DIR__.'/../../core/model', '/'), $className) . '.php';\n});\n</code></pre> <p>4. For menus</p> <ul> <li> <p>For menu management in the case of a classic plugin, fixed menus can be injected via the database, see the example of the jitsimeeting plugin: <code>install.sql</code>, see above, sql entries: <code>plugin_menu_bar</code>.</p> </li> <li> <p>for menu link management (in the dynamic case: you create menus dynamically) correlated to a base menu, here's an example code :</p> </li> </ul> <pre><code>....\n\n        // we set the new menu bar link\n        $menuBarLink = new PluginMenuBar();\n        $menuBarLink-&gt;setURL($event-&gt;getLink());\n        $menuBarLink-&gt;setName('EventWorkflow');\n        $menuBarLink-&gt;setDisplayName(InputUtils::FilterHTML($name));\n        $menuBarLink-&gt;setIcon('');\n        $menuBarLink-&gt;setLinkParentId(($type == 'one day')?$masterSeveralDay-&gt;getId():$masterOneDay-&gt;getId());         \n        $menuBarLink-&gt;save();\n        // end of the menu link\n\n....\n</code></pre>"},{"location":"user-guide/doc-dev/doc-plugins/start/#creating-a-dashboard-plugin","title":"Creating a dashboard plugin","text":"<p>1. For the injection at the database level in the \"plugin\" table</p> <p>'widget'</p> <p>In the database Put the plugin, we must set</p> <ul> <li><code>plgn_Category</code> to <code>Dashboard</code>.</li> <li><code>plgn_default_orientation</code> to <code>widget</code> if you want to have a widget (the little square in the top main dashboard)</li> <li>a description <code>plgn_Description</code> to ``Plugin to show the current connected users</li> <li>a version <code>`plgn_version</code> `` to '1.0' for example</li> <li>the prefix type for the <code>plgn_prefix</code> entries to <code>cud_</code>.</li> <li>the position at <code>plgn_default_orientation</code> at <code>top`,</code>left<code>,</code>center<code>,</code>right``</li> <li>the color of the card's bar <code>`plgn_default_color``</code>bg-gradient-blue text-white'', ``bg-gradient-indigo text-white'', .... (see for this the database)</li> <li>the security part is very important <code>plgn_securities</code> to those possible values which are in <code>src\\EcclesiaCRM\\model\\User.php</code></li> </ul> <pre><code>abstract class SecurityOptions\n{\n    const bNoDashBordItem = 0;\n    const bAdmin = 1; // bit 0\n    const bPastoralCare = 2;// bit 1\n    const bMailChimp = 4;// bit 2\n    const bGdrpDpo = 8;// bit 3\n    const bMainDashboard = 16;// bit 4 is now deprecated\n    const bSeePrivacyData = 32;// bit 5\n    const bAddRecords = 64;// bit 6\n    const bEditRecords = 128;// bit 7\n    const bDeleteRecords = 256;// bit 8\n    const bMenuOptions = 512;// bit 9\n    const bManageGroups = 1024;// bit 10\n    const bFinance = 2048;// bit 11\n    const bNotes = 4096;// bit 12\n    const bCanvasser = 8192;// bit 13\n    const bEditSelf = 16384;// bit 14\n    const bShowCart = 32768;// bit 15\n    const bShowMap = 65536;// bit 16\n    const bEDrive = 131072;// bit 17\n    const bShowMenuQuery = 262144; // bit 18\n    const bDashBoardUser = 1073741824; // bit 30\n}\n</code></pre> <ul> <li>Optional side: <code>`plgn_UserRole_Dashboard_Availability</code> which can be set to 1 (this will allow user to be administrator: in the case of the News dashboard only few people can enter the news, the others will be simply readers).</li> </ul> <p>Screenshot](../../../img/plugins/plugins_dashboard_admin.png)</p> <p>Here is an example</p> <pre><code>INSERT INTO `plugin` ( `plgn_Name`, `plgn_Description`, `plgn_Category`, `plgn_image`, `plgn_installation_path`, `plgn_activ`, `plgn_version`, `plgn_prefix`, `plgn_position`, `plgn_default_orientation`, `plgn_default_color`, `plgn_securities`)\nVALUES ('CurrentUsersDashboard', 'Plugin to show the current connected users', 'Dashboard', NULL, '', '1', '1.0', 'cud_', 'inside_category_menu', 'right', 'bg-gradient-green text-black', 1073741824);\n</code></pre> <p>2. about the code</p> <ul> <li>There is only one view in : v2/template/View.php</li> <li>set correctly the card .....   In the code of the View.php</li> </ul> <pre><code>&lt;?php\nuse EcclesiaCRM\\PluginQuery;\nuse EcclesiaCRM\\PluginUserRoleQuery;\nuse EcclesiaCRM\\Map\\PluginUserRoleTableMap;\n\n....\n\n// we've to load the model make the plugin to work\n// for example if you've a model for your propel orm version + a class service\n\nspl_autoload_register(function ($className) {\n    include_once str_replace(array('PluginStore', '\\\\'), array(__DIR__.'/../../core/model', '/'), $className) . '.php';\n    include_once str_replace(array('Plugins\\\\Service', '\\\\'), array(__DIR__.'/../../core/Service', '/'), $className) . '.php';\n});\n\nuse .....\n\n....\n\n$plugin = PluginQuery::create()\n    -&gt;usePluginUserRoleQuery()\n        -&gt;addAsColumn('PlgnColor', PluginUserRoleTableMap::COL_PLGN_USR_RL_COLOR)\n    -&gt;endUse()\n    -&gt;findOneById($PluginId);\n\n..... .... Your code\n?&gt;\n\n&lt;div class=\"card &lt;?= $plugin-&gt;getName() ?&gt; &lt;?= $Card_collapsed ?&gt;\" style=\"position: relative; left: 0px; top: 0px;\" data-name=\"&lt;?= $plugin-&gt;getName() ?&gt;\"&gt;\n    &lt;div class=\"card-header border-0 ui-sortable-handle\"&gt;\n        &lt;h5 class=\"card-title\"&gt;&lt;i class=\"fas fa-newspaper\"&gt;&lt;/i&gt; &lt;?= dgettext(\"messages-NewsDashboard\",\"News\") ?&gt;&lt;/h5&gt;\n        &lt;div class=\"card-tools\"&gt;\n            &lt;button type=\"button\" class=\"btn btn-default btn-sm\" data-card-widget=\"remove\"&gt;\n                &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt;\n            &lt;/button&gt;\n            &lt;button type=\"button\" class=\"btn btn-default btn-sm\" data-card-widget=\"collapse\" title=\"Collapse\"&gt;\n                &lt;i class=\"fas &lt;?= $Card_collapsed_button?&gt;\"&gt;&lt;/i&gt;\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"card-body\" style=\"&lt;?= $Card_body ?&gt;;padding: .15rem;\"&gt;\n\n         .... Your code\n\n    &lt;/div&gt;\n&lt;/div\n</code></pre> <p>3. Attention</p> <ul> <li>pour les dashboard plugins, le code js est charg\u00e9 dans le footer</li> <li>le css est \u00e9galement charg\u00e9 pour vous par le CRM.</li> <li>le code css est charg\u00e9 automatiquement dans le header !!!!</li> </ul> <p>Cela \u00e9vite des chargements sales en plein milieu du code.</p>"},{"location":"user-guide/doc-dev/doc-plugins/start/#final-recommendations-for-both-types-of-plugins","title":"Final recommendations for both types of plugins","text":"<p>0. VERY IMPORTANT</p> <p>For templates and JS/CSS code to work properly</p> <ul> <li>The plugin folder must have the same name as the plugin name (this is what plugin management and integration is all about).</li> <li>In the case of the JitsiMeeting view controler, note that in <code>PhpRenderer</code> we have: <code>SystemURLs::getDocumentRoot().'/Plugins/MeetingJitsi/...</code> if the name differs, the templates and JS/CSS code will not load.</li> </ul> <pre><code>    public function renderDashboard (ServerRequest $request, Response $response, array $args): Response {\n        $renderer = new PhpRenderer(SystemURLs::getDocumentRoot().'/Plugins/MeetingJitsi/v2/templates');\n\n        if ( !( SessionUser::getUser()-&gt;isEnableForPlugin('MeetingJitsi') ) ) {\n            return $response-&gt;withStatus(302)-&gt;withHeader('Location', SystemURLs::getRootPath() . /v2/dashboard');\n        }\n\n        return $renderer-&gt;render($response, 'meetingdashboard.php', $this-&gt;argumentDashboard());\n    }\n</code></pre> <ul> <li>Everything is done in the plugin manager to ensure that the code loads optimally. </li> </ul> <p>Translated with DeepL.com (free version)</p> <p>1. For translations</p> <ul> <li>For the PHP code: We don't use <code>gettext</code> but with dgettext and an associated domain <code>dgettext(\"messages-NewsDashboard\", \"News\")</code> and we work with separate po code for each plugin to avoid conflicts.</li> <li>For the JS code: We use <code>i18next.t('News Title', {ns: 'NewsDashboard'})</code> with <code>namespace</code> also.</li> </ul> <p>2. For specialized propel code or classes, the autoload must be done manually</p> <p>Tip :</p> <ul> <li>never use <code>composer dump-autoload</code> it will not work when loading the plugin via the plugin manager</li> <li>So you have to work around the problem like this:</li> </ul> <pre><code>// we've to load the model make the plugin to work\nspl_autoload_register(function ($className) {\n    include_once str_replace(array('Plugins\\Service', '\\'), array(__DIR__.'/../../core/Service', '/'), $className) . '.php';\n    include_once str_replace(array('PluginStore', '\\\\'), array(__DIR__.'/../../core/model', '/'), $className) . '.php';\n});\n</code></pre> <p>3. The signatures</p> <p>The signature of a plugin is created via the tool provided by the CRM : grunt genPluginsSignatures at the root path of your dev env.</p> <p>Good development of plugins.</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-activation/","title":"Activation & Management","text":"<p>Once the GDPR activated EcclesiaCRM will need a final setting made in with the Board of Administration of the Church with a DPO in order to answer better the legislative requirements of each EU country.</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-activation/#activation","title":"Activation","text":"<p>During a new installation each question is asked during the process. It is also possible to answer later, to this end go to:</p> <p></p> <p>Then choose the GDPR tab:</p> <p></p> <ul> <li>bGDPR : Allows to activate it or not</li> <li>sGdprDpoSigner : the name of the DPO</li> <li>sGdprDpoSignerEmail : its email address</li> <li>iGdprExpirationDate : The period of time until the deactivate member will be under the DPO management.</li> </ul> <p>Once the option is activated a new menu will appear</p> <p></p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-activation/#gdpr-menu","title":"GDPR Menu","text":"<ul> <li>Follow-up: each manipulation is saved in order to record the modification made by a supervisor</li> </ul> <ul> <li>data structure</li> </ul> <p>Each part of the data structure has to be explained via the comments.</p> <p>Warning : Each CRM field, each property will appear there and will be commented. A comment is validated via the ENTER key.</p> <ul> <li>Members and families deactivated</li> </ul> <p>The deactivation is applicable only after a certain period of time: as mentioned in iGdprExpirationDate.</p> <p>Warning : a member that would have made donation must not be erase from the system, for tax purposes.</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/","title":"Overview","text":"<ul> <li>The GDPR is an european necessity.</li> <li>to operate it needs a designated person in the association who will be aware of the forthcoming legislatives dispensed by the CNIL, for example</li> </ul> <p>EcclesiaCRM has been thought and built to meet this principle, as much with its DPO management as its internal structure</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/#security","title":"Security","text":"<p>The CRM was built around an API (via SLIM) and operates via a token during the activation, once the user is disconnected the token is null and thus the data access too.</p> <p>Each file is assigned to a user and stored in a file with a UUID.</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/#follow-up","title":"Follow-up","text":"<p>Follow-up: each manipulation is saved in order to record the modification made by a supervisor</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/#user-rights","title":"User rights","text":"<p>Each user has specific legal rights, set up together with the DPO. With that any CRM user will only be able to see what role was given to him.</p> <p>The CVS or PDF extractions are only possible via this role.</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/#deactivated-user","title":"Deactivated user","text":"<ul> <li>A deactivated user is invisible to all the other users, except from an administrator for the legal period of two years.</li> <li>They are invisible for any request, research, extraction,...</li> <li>After the two years they will be under the DPO, which will be the only one able to see them.</li> <li>The DPO will be able to reactivate them or to erase them definitely from the CRM.</li> </ul>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/#dpos-limitations","title":"DPO's limitations","text":"<p>A user will only be erase definietely is their past donations are assigned to an other member or family.</p> <p>The tax laws being a priority, more than the GDPR.</p>"},{"location":"user-guide/doc-gdpr/doc-gdpr-introduction/#mailchimp","title":"MailChimp","text":"<p>When GDPR function is activated, every MailChimp mailing list automatically becomes GDPR and can not be legally used by MailChimp for commercial purposes.</p>"},{"location":"user-guide/doc-installation/doc-install/","title":"Installation process","text":""},{"location":"user-guide/doc-installation/doc-install/#installation","title":"Installation","text":"<ul> <li>Download the archive on git</li> <li>then copy the files on the server</li> <li>and the installer will guide you</li> </ul>"},{"location":"user-guide/doc-installation/doc-install/#be-aware-of-the-required-elements","title":"Be aware of the required elements","text":""},{"location":"user-guide/doc-installation/doc-install/#then","title":"Then","text":""},{"location":"user-guide/doc-installation/doc-install/#here-one-will-be-able-to-set-the-path-if-it-is-non-standard","title":"Here one will be able to set the path if it is non-standard","text":""},{"location":"user-guide/doc-installation/doc-install/#one-can-use-the-localhost-or-choose-the-server-name-with-a-communication-port","title":"One can use the localhost or choose the server name with a communication port","text":"<ul> <li>The name of the data base is to be entered</li> <li>As the user's name and password (twice)</li> </ul> <p>one will be able to test the connectivity to the datat base by clicking on: \"here\"</p> <p>They can access the data base and go on with the process</p>"},{"location":"user-guide/doc-installation/doc-install/#legal-informations","title":"Legal informations","text":"<p>Here one will set:</p> <ul> <li>The language of the CRM :</li> <li>The time zone (key for the Drive)</li> <li>The rest of the setting is standard</li> </ul>"},{"location":"user-guide/doc-installation/doc-install/#more-informations","title":"More informations","text":"<ul> <li>The person legally responsible for everything that is done on the CRM (Confirm Signer) is the pastor</li> <li>The person legally responsible for the reminders of everything done on the CRM (Confirm Signer) is the pastor</li> <li>the Tax signer would be the treasurer</li> <li>DPO GDPR Signer is the supervisor of all the stored data in the CRM</li> <li>The email address of the DPO</li> </ul>"},{"location":"user-guide/doc-installation/doc-install/#the-rest-is-more-standard","title":"The rest is more standard","text":""},{"location":"user-guide/doc-installation/doc-install/#the-set-up-of-the-email-connection","title":"The set up of the email connection","text":"<p>The email management is key in the CRM since each action is likely to send an email</p> <ul> <li>modify an account or deactivate it</li> <li>add some member to an event in the calendar</li> <li>etc ....</li> </ul> <p></p> <p>Note It is possible to set the settings later on, go on \"general settings\" and then \"email\"</p> <p></p> <p></p> <ul> <li>one can set the server address with the communication port, as on the tool tip</li> <li>hey will ask an authentification</li> <li>user's name</li> <li>password</li> <li>connection period</li> <li>email address</li> <li>For PHPmailer the settings may be in TLS (if the server connection is made in https).</li> </ul>"},{"location":"user-guide/doc-installation/doc-install/#first-connections-settings","title":"First connection's settings","text":"<ul> <li>One will end up on the home screen</li> </ul> <p>The login is       : admin</p> <p>The password is : changeme</p> <ul> <li>The user will be ask to change his password during the first connection</li> </ul> <p></p>"},{"location":"user-guide/doc-installation/doc-localization/","title":"Localization in foreign language + currency","text":""},{"location":"user-guide/doc-installation/doc-localization/#to-set-your-crm-in-a-foreign-language-for-example-in-french","title":"To set your CRM in a foreign language, for example in french","text":"<p>Now choose the Localization tab</p> <p></p>"},{"location":"user-guide/doc-installation/doc-localization/#to-set-your-foreign-parameters","title":"To set your foreign parameters","text":"<ul> <li>sLanguage : for the language</li> <li>bStateUnusefull : in France this parameter is unusefull</li> <li>sPhoneFormat : you can set your phone format</li> <li>etc ...</li> </ul>"},{"location":"user-guide/doc-installation/doc-localization/#to-set-the-currency","title":"To set the currency","text":""},{"location":"user-guide/doc-installation/doc-report/","title":"Export in foreign language","text":"<p>Vous voudrez tr\u00e8s certainement avoir votre serveur en Fran\u00e7ais.</p> <p>Pour acc\u00e9der aux r\u00e9glages, la proc\u00e9dure est la m\u00eame que pour la partie localisation.</p> <p>Vous pourrez r\u00e9gler les rapports en cliquant sur :</p> <p></p>"},{"location":"user-guide/doc-installation/doc-report/#les-rapports-se-situent","title":"Les rapports se situent","text":"<ul> <li>Les annuaires \u00e0 cr\u00e9er.</li> <li>Les exports aux niveau \u00e9cole du dimanche.</li> <li>Les rapports financiers.</li> <li>Le mail de notification quand on change un identifiant ou autre.</li> <li>etc ...</li> </ul> <p>Vous pourrez ici fixer tous les rapports en fran\u00e7ais.</p>"},{"location":"user-guide/doc-installation/doc-requirement/","title":"System requirements","text":""},{"location":"user-guide/doc-installation/doc-requirement/#server","title":"Server","text":"<ul> <li>A Linux server</li> <li>A server LAMP : Linux Apache Mysql or Php is required</li> <li>With NGinx one may have issue ( not tested yet)</li> <li>php 8.0 is required at the minimum</li> <li>A Mysql 5.7 database</li> <li>MariaDB also works</li> </ul>"},{"location":"user-guide/doc-installation/doc-requirement/#mods-to-activate-on-apache","title":"Mods to activate on Apache:","text":"<ul> <li>PCRE and UTF-8 are required</li> <li>Multibyte Encoding</li> <li>PHP Phar</li> <li>PHP Session</li> <li>PHP XML</li> <li>PHP EXIF</li> <li>PHP imagick</li> <li>PHP iconv</li> <li>OpenSSL</li> <li>Mod Rewrite</li> <li>GD Library to handle the pictures</li> <li>FileInfo Extension for the files' infos</li> <li>cURL</li> <li>locale gettext</li> <li>Include/Config the configuration file is accessible in writing</li> <li>the picture file is accessible in writing also</li> </ul> <p>Note for imagick</p> <pre><code>sudo sed -i_bak 's/rights=\"none\" pattern=\"PDF\"/rights=\"read | write\" pattern=\"PDF\"/' /etc/ImageMagick-6/policy.xml\n</code></pre>"},{"location":"user-guide/doc-installation/doc-requirement/#for-apache-vhost","title":"for Apache vhost","text":"<pre><code>    &lt;IfModule mod_env.c&gt;\n        ## Tell PHP that the mod_rewrite module is ENABLED.\n        SetEnv HTTP_MOD_REWRITE On\n    &lt;/IfModule&gt;\n</code></pre>"},{"location":"user-guide/doc-installation/doc-requirement/#memory","title":"Memory","text":"<ul> <li>Max file upload size  32M</li> <li>Max POST size  32M</li> <li>PHP Memory Limit  128M</li> </ul>"},{"location":"user-guide/doc-installation/doc-requirement/#mode-evasive-and-security","title":"Mode evasive and security","text":"<ul> <li>Apache mod-evasive may make the CRM ineffective</li> <li>Apache mod-security has to be be turned off</li> </ul>"},{"location":"user-guide/doc-installation/doc-requirement/#optional-webdav","title":"Optional : WebDAV","text":"<ul> <li>WebDAV/CalDav and CardDav are assets for the connection to work like NextCloud ...</li> <li>The file \"data\" has to be fix to 755</li> <li>The file \"private\" has to be fix to 755 as well as userid</li> <li>The file \"public\" has to be fix to 755 as well as userid</li> </ul> <p>The last point is useless for the operation but a true asset for the app</p>"},{"location":"user-guide/doc-mailchimp/dashboard/","title":"MailChimp","text":"<p>EcclesiaCRM is fully compatible with MailChimp </p> <pre><code>The free version of Mailchimp can now only make one list (Audience).\nThe use of TAgs is a way to get around that.\n</code></pre> <p>So it is possible now</p> <ul> <li>to create audience (mailing list)</li> <li>to create campaign</li> <li>to add segments</li> <li>to use code fields</li> <li>to create templates within the CRM</li> <li>etc ....</li> </ul>"},{"location":"user-guide/doc-mailchimp/dashboard/#activation","title":"Activation","text":"<p>To activate the feature one has to go to \"Edit General Settings\"</p> <p></p> <p>Then in \"Enabled Features\"</p> <p></p>"},{"location":"user-guide/doc-mailchimp/dashboard/#establishment-get-a-mailchimp-key","title":"Establishment: get a Mailchimp key","text":"<p>One can get it with the link :  suivant</p>"},{"location":"user-guide/doc-mailchimp/dashboard/#set-eccelesiacrm-for-mailchimp","title":"Set EccelesiaCRM for Mailchimp","text":"<p>Then enter the Mailchimp key in EcclesiaCRM</p> <ol> <li>Go to general settings sMailChimpApiKey </li> <li>Enter the Mailchimp key </li> <li>One can also set the number of subscribers on the list. iMailChimpApiMaxMembersCount Note: It is advised to fix a low number, to avoid being see as a spammer 4.It is possible to add the address and phone numbers of the subscribers, and activate: bMailChimpWithAddressPhone</li> </ol>"},{"location":"user-guide/doc-mailchimp/dashboard/#add-the-role-mailchimp-to-a-user","title":"Add the role \"MailChimp\" to a user","text":"<p>A user has to be given the role \"MailChimp\" in order to be able to use it. To this end, go to:</p> <p></p> <p>Then select the user and edit them after having added the role \"MailChimp</p> <p></p> <p>Then tick the box and save</p> <p></p>"},{"location":"user-guide/doc-mailchimp/dashboard/#mailchimp-introduction","title":"Mailchimp : Introduction","text":"<p>Mailchimp is a mailing system that can send a Newsletter, which allows a member to send an email to a large group of members.</p> <p>With Mailchimp, one can:</p> <ul> <li>make a mailing list (GDPR)</li> <li>Add CRM members to a list</li> <li>make campaigns</li> <li>modify</li> </ul> <p>And without logging out from EcclesiaCRM.</p>"},{"location":"user-guide/doc-mailchimp/dashboard/#warning-check-the-connectivity-of-the-crm","title":"Warning : check the connectivity of the CRM","text":"<p>To check it one can go to : Email -&gt; Mailchimp -&gt; dashboard </p> <p>Then click on the button \"Debug\".</p> <p>You should see a report of the connexion.</p>"},{"location":"user-guide/doc-mailchimp/dashboard/#result","title":"Result","text":""},{"location":"user-guide/doc-mailchimp/manage_campaign/","title":"Campaign management","text":"<p>Warning about the pictures management, the file manager has to point on the public file. This is normally automatic.</p> <p>Because every image inserted in the campaign has to have public links (and not private).</p>"},{"location":"user-guide/doc-mailchimp/manage_campaign/#create-a-campaign","title":"Create a campaign","text":"<p>Click on the following button or select each member without tags</p> <p></p> <p>Or select a tag</p> <p></p> <p>then one will be able to create the body text of the campaign</p> <p></p> <p>One can now select the campaign's title and the email's object</p>"},{"location":"user-guide/doc-mailchimp/manage_campaign/#management-of-a-standard-email-code-field-mailing","title":"Management of a standard email (code field: mailing)","text":"<p>It is now possible to use Mailchimp code Fields, which can make standard email</p> <p></p> <p>The following example shows the FNAME, LNAME and the creation date of the email</p> <p></p> <p>When the campaign is sent the FNAME and LNAME of each user will be substitute to the code field.</p> <ul> <li>One can create an unsubscribing link with the mailing list To this end, one has to use a code field</li> </ul> <p></p> <p>Wich results in</p> <p></p> <p>Then selects the text <code>*|UNSUB|*</code></p> <p></p> <p>and</p> <p></p> <p>And click on \"ok\"</p> <p>Note in the general settings, it is possible to add the address and phone number of each user.</p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_campaign/#insert-pictures-or-documents","title":"Insert pictures or documents","text":"<ul> <li>Drop them in the text zone</li> </ul> <p>The image's link is public</p> <p></p> <p>You can change the size</p> <ul> <li>With the file manager</li> </ul> <p></p> <p>dialog box</p> <p></p> <p>Click on \"browse the server\"</p> <p></p> <p>then the file manager</p> <p></p> <p>One can download a picture with the server</p> <p></p> <p>And selects the file to drop</p> <p></p> <ul> <li>And dropping a file is possible in an email too</li> </ul> <p></p> <p>Here's the attachment file</p> <p></p> <p>Once the campaign is done, one can \"save\" it</p>"},{"location":"user-guide/doc-mailchimp/manage_campaign/#plan-the-mailing","title":"Plan the mailing","text":"<p>Save the campaign and one will be on the sending page</p> <p></p> <p></p> <p>Here one will be able to sava, send, delete or fix a date and a time for their campaign</p> <p></p> <p>Note - It is advised to create a bank of templates to use them later, to do this one has to go in \"Manual: User\" and \"Documents\" and last in \"Documents &amp; Templates\". - It is possible to modify it later too. - You can schedule your campaign.</p>"},{"location":"user-guide/doc-mailchimp/manage_list/","title":"Manage Audience (List) Mailchimp","text":""},{"location":"user-guide/doc-mailchimp/manage_list/#make-a-mailing-list","title":"Make a mailing list","text":"<p>Go to the dashboard in Mailchimp and click on the button: </p> <p>Here is the dialog box:</p> <p></p> <ul> <li>a title for the mailing list</li> <li>a topic for the dissemination campaign</li> <li>a permission reminder in your dissemination campaign allows the recipients to know where they subscribed It may help to not be categorized as a spammer by the recipients. Mailchimp will automatically insert the permission reminder in every email with the merge tag<code>*|LIST:DESCRIPTION|*</code>.</li> <li>About the archive bar, see the following link suivant</li> </ul>"},{"location":"user-guide/doc-mailchimp/manage_list/#add-members-to-the-list","title":"Add members to the list","text":"<p>In all the list, choose one and click on \"modify\"</p> <p></p> <p>One'll be able to change the name of the list, or other properties with the button:</p> <p></p> <p>One has to use the following dialog box</p> <p></p> <p>Then at the bottom of the page</p> <p></p> <p>One'll has several possibilities</p> <ul> <li>Add a member</li> <li>a family</li> <li>the members of a group</li> <li>all the CRM members with : *</li> <li>all NewsLetter subscribers by writing : NewsLetter</li> </ul>"},{"location":"user-guide/doc-mailchimp/manage_list/#modify-a-subscribers-status","title":"Modify a subscriber's status","text":"<p>One can change the status from \"subscribed\" to \"Unsubscribed\" by choosing the member and clicking on the pencil:</p> <p></p> <p>Then to select the status as following:</p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_list/#modify-the-status-of-several-subscribers","title":"Modify the status of several subscribers","text":"<p>Select the said members</p> <p></p> <p>Then click on the menu and choose the option wanted:</p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_list/#delete-a-member-from-the-mailing-list","title":"Delete a member from the mailing list","text":"<p>Click on the basket</p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_list/#delete-several-members-from-the-mailing-list","title":"Delete several members from the mailing list","text":"<p>Select the said members</p> <p></p> <p>And click on the button \"Delete\"</p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_tag/","title":"Manage Segments (Tags) in an audience (List) Mailchimp","text":"<p>The tags are a mean to be able to, in a same list, organize the members and create a campaign that suits them</p> <ul> <li>It is possible to create a campaign with all the members</li> <li>or only with a tag</li> </ul> <p>Here is a list with two tags that had already been made</p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_tag/#create-a-tag-in-a-mailing-list","title":"Create a tag in a mailing list","text":"<p>The list with members has to already exist</p> <p>Then select one or several members</p> <p></p> <p>Then add a new tag</p> <p></p> <p>Enter a name for the tag</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"user-guide/doc-mailchimp/manage_tag/#delete-a-tag-for-one-or-several-members","title":"Delete a tag for one or several members","text":"<p>One can select the members manually</p> <p></p> <p>Choose the menu \"delete tag\"</p>"},{"location":"user-guide/doc-mailchimp/manage_tag/#delete-a-tag-from-the-mailing-list","title":"Delete a tag from the mailing list","text":"<p>Click on the cross</p> <p></p> <p>The tag is now deleted for all members and from the mailing list</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-add-person-family/","title":"Pastoral care for Person or Family","text":"<p>Each pastor, counsellor in self help, and supervisor allowed can manage the pastoral care for single person or for family.</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-add-person-family/#make-a-pastoral-care-note-for-a-person","title":"Make a pastoral care note for a person","text":"<p>Search a user with the menu in the leftside bar.</p> <p></p> <p>Here's the profile :</p> <p></p> <p>One has to click on the button and can now begin the pastoral care</p> <p></p> <p>The view is divided in two parts :</p> <ul> <li>The buttons to choose the type, print or filter the notes taken for those who have followed the pastoral care</li> <li>and the personalization part, with the preset types</li> </ul> <p></p> <ul> <li>For example: choose \"why did you come to church?\" in the menu <ul> <li>Il sera possible dans la fen\u00eatre ci-dessus, de glisser d\u00e9poser des images documents dans la zone</li> <li>You can drag and drop documents, images in the zon above</li> <li>You can use document templates Mod\u00e8le</li> <li>adding some tables</li> <li>etc ...</li> </ul> </li> </ul> <p>Note the radio buttons \"Show\" \"hide\" allows to show or not the notes taken by a pastor</p> <p>It may be useful to know that a member is taken care of, without the notes shown to everyone</p> <ul> <li>After entering, here's the result</li> </ul> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-add-person-family/#make-a-pastoral-care-note-for-a-family","title":"Make a pastoral care note for a family","text":"<p>You can add one for a family too :</p> <ul> <li>Search and Choose a family</li> <li>and follow the same steps as for a person</li> </ul> <p></p> <p>You can add the same comment for all the members of this family, by checking the box \"include\" :</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-add-person-family/#filtering-by-a-pastor-or-counsellor","title":"Filtering by a pastor or counsellor","text":"<p>Click on the button on the right</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-classifications/","title":"Pastoral Care by Classifications","text":"<p>Each pastor, counsellor in self help, and supervisor allowed can manage the pastoral care for single person or for family.</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-classifications/#pastoral-care-members-list-by-classification","title":"Pastoral care members list by classification","text":"<p>For a user to be allowed to use the pastoral care, open the left side menubar</p> <p></p> <p>You should get</p> <p></p> <p>On the top of the table, you can filter the table through the radio buttons</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-classifications/#view-by-only-the-visitedcalled-persons","title":"View by: Only the visited/called persons","text":"<p>Select the radio button : \"Only the visited/called persons\"</p> <p></p> <p>The result is:</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-classifications/#filter-by-classification","title":"Filter by classification","text":""},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-dashboard/","title":"Pastoral Care Dashboard","text":"<p>Each pastor, counsellor in self help, and supervisor allowed can manage the pastoral care for single person or for family.</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-dashboard/#on-the-main-dashboard","title":"On the main dashboard","text":"<p>When you open your session</p> <p></p> <p>You can notice the red color of the pastoral care alert</p> <ul> <li>red    mean: less than 10% of your church are yet reached</li> <li>yellow mean: less than 30% of your church are yet reached</li> <li>blue   mean: less than 60% have been reached</li> <li>green  mean: church is really in good health</li> </ul> <p>By clicking the button \"Manage Pastoral Care\" you'll get more details of the health of your church.</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-dashboard/#pastoral-dashboard-full-details","title":"Pastoral Dashboard : full details","text":"<p>To get a full details of the health of your church, on the leftside menu bar, choose</p> <p></p> <p>You'll get the view below</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care-dashboard/#call-randomly-a-person-a-single-person-etc","title":"Call randomly a person, a single person, etc ...","text":"<p>Open the menu called : \"Visit/call randomly\"</p> <p></p> <p>For a single person, ou get</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care/","title":"Pastoral care for Person or Family","text":"<p>Each pastor, counsellor in self help, and supervisor allowed can manage the pastoral care for single person or for family.</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care/#activate-the-pastoral-care-for-a-system-user","title":"Activate the pastoral care for a system user","text":"<p>For a user to be allowed to use the pastoral care, he must be assigned the role pastoral care</p> <p>To do this, go to: </p> <p>Select a user, then edit them and add the role pastoral care</p> <p></p> <p>One ticks the box and saves:</p> <p></p> <p>The user will now be able to add notes on the pastoral care</p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care/#make-a-pastoral-care-note-for-a-person","title":"Make a pastoral care note for a person","text":"<p>Search a user with the menu in the leftside bar.</p> <p></p> <p>Here's the profile :</p> <p></p> <p>One has to click on the button and can now begin the pastoral care</p> <p></p> <p>The view is divided in two parts :</p> <ul> <li>The buttons to choose the type, print or filter the notes taken for those who have followed the pastoral care</li> <li>and the personalization part, with the preset types</li> </ul> <p></p> <ul> <li>For example: choose \"why did you come to church?\" in the menu <ul> <li>Il sera possible dans la fen\u00eatre ci-dessus, de glisser d\u00e9poser des images documents dans la zone</li> <li>You can drag and drop documents, images in the zon above</li> <li>You can use document templates Mod\u00e8le</li> <li>adding some tables</li> <li>etc ...</li> </ul> </li> </ul> <p>Note the radio buttons \"Show\" \"hide\" allows to show or not the notes taken by a pastor</p> <p>It may be useful to know that a member is taken care of, without the notes shown to everyone</p> <ul> <li>After entering, here's the result</li> </ul> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care/#make-a-pastoral-care-note-for-a-family","title":"Make a pastoral care note for a family","text":"<p>You can add one for a family too :</p> <ul> <li>Search and Choose a family</li> <li>and follow the same steps as for a person</li> </ul> <p></p> <p>You can add the same comment for all the members of this family, by checking the box \"include\" :</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-pastoral-care/#filtering-by-a-pastor-or-counsellor","title":"Filtering by a pastor or counsellor","text":"<p>Click on the button on the right</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-settings/doc-settings-pastoral-care/","title":"Pastoral care Customization &amp; EcclesiaCRM","text":"<p>Here one can add properties at the pastoral level</p> <ul> <li>They may be visible or not by the other pastors or counsellors</li> </ul>"},{"location":"user-guide/doc-pastoral-care/doc-settings/doc-settings-pastoral-care/#access-the-properties","title":"Access the properties","text":"<p>Go to:</p> <p></p> <p>One can make a new entitled for the pastoral care notes</p> <p></p>"},{"location":"user-guide/doc-pastoral-care/doc-settings/doc-settings-pastoral-care/#legal-rights","title":"Legal rights","text":"<p>If the box is checked everyone will be able to see the pastoral care notes, which is not always useful for all the pastors to see all the notes</p>"},{"location":"user-guide/doc-person/doc-person-calendar/","title":"Add & delete","text":"<p>A user can create personal calendars and open them on his cellphone or share them to other users.</p>"},{"location":"user-guide/doc-person/doc-person-calendar/#calendars","title":"Calendars","text":"<p>Choose \"Events\" &amp; \"Calendars\" in the sidebar</p> <p></p> <p>There are three types of calendars:</p> <ul> <li> <p>personal calendar</p> </li> <li> <p>group calendar</p> </li> <li> <p>resources calendar</p> </li> <li> <p>shared calendar</p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-calendar/#to-add-a-new-calendar","title":"To add a new calendar","text":"<ul> <li>Click on \"+\"</li> </ul> <ul> <li>then choose a name</li> </ul>"},{"location":"user-guide/doc-person/doc-person-calendar/#change-the-color","title":"Change the color","text":"<ul> <li>Click on the calendar icon</li> </ul> <ul> <li>Choose the desired color</li> </ul> <ul> <li>The result is on the right</li> </ul>"},{"location":"user-guide/doc-person/doc-person-calendar/#includeexclude-calendars","title":"Include/exclude calendars","text":"<ol> <li> <p>One can include/exclude some calendars</p> <ul> <li>click on the wheel</li> </ul> <p></p> <ul> <li>Select the calendar to include/exclude</li> </ul> <p></p> <ul> <li>The result:</li> </ul> <p></p> <ul> <li>In the sidebar the calendar is hidden and not deleted</li> </ul> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-calendar/#to-delete-a-calendar","title":"To delete a calendar","text":"<ol> <li>Go to the part management (second wheel)</li> </ol> <ol> <li>Click on \"delete\"</li> </ol>"},{"location":"user-guide/doc-person/doc-person-calendar/#notes","title":"Notes","text":"<p>There are two links in this window: - One of the link is for the shared calendars and comes in handy when the server is compatible with Caldav. - The other link is usable as long as the administrator settings allow it, to this end one can go to the settings part of the administrator manual.</p>"},{"location":"user-guide/doc-person/doc-person-document-creation/","title":"Create & manage","text":"<p>It is possible with the EcclesiaCRM version 4.1 and higher to manage the documents models.</p>"},{"location":"user-guide/doc-person/doc-person-document-creation/#display-all-the-documents","title":"Display all the documents","text":"<ol> <li> <p>Go to private space</p> <p></p> </li> <li> <p>Cliquez l'onglet Documents click on the tab \"document\"</p> <p></p> </li> <li> <p>Here's the list of documents</p> <p></p> </li> <li> <p>It is possible to list them by type</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-creation/#creation","title":"Creation","text":"<ol> <li> <p>Go to a document, CKEditor</p> <ul> <li>Go to private space</li> </ul> <p></p> </li> <li> <p>Add a document</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-creation/#editing","title":"Editing","text":"<p>Click on the icon</p> <p></p>"},{"location":"user-guide/doc-person/doc-person-document-creation/#deleting","title":"Deleting","text":"<p>Click on the icon</p> <p></p>"},{"location":"user-guide/doc-person/doc-person-document-creation/#one-can-create-three-types-of-document","title":"One can create three types of document","text":"<ol> <li>The standard documentsone can have a word processing. it is possible to work in full screen mode.</li> </ol> <p>It is a CKeditor document on display in the CRM.One can formate it as desired.</p> <ol> <li>Videos</li> </ol> <p>It is a standard CKeditor document in a video format.</p> <ul> <li> <p>To add a Youtube video the process is complex because of the rights:</p> </li> <li> <p>Go on Youtube:</p> </li> </ul> <p></p> <ul> <li>Click on the link \"share\"</li> </ul> <p></p> <ul> <li>Click on the link \"include\"</li> </ul> <p></p> <ul> <li>Copy the link as following</li> </ul> <p></p> <ul> <li>Go on EcclesiaCRM and create a document (see the first step) and choose the type \"standard video\"</li> </ul> <p></p> <ul> <li>Click on the icon</li> </ul> <p></p> <ul> <li>paste the link</li> </ul> <p></p> <ul> <li>Give a name to the document</li> </ul> <p></p> <ol> <li>The standard audio files</li> </ol> <p>It is a standard CKeditor document in an audio format, it is only useful for the listing</p>"},{"location":"user-guide/doc-person/doc-person-document-creation/#notes","title":"Notes","text":"<ul> <li>One can do the same with the shared and group calendars</li> <li>A group calendar can only be add by an administrator</li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-edrive/","title":"EDrive in the CRM","text":"<p>It is possible in the 5.0 d'EcclesiaCRM and higher, to manage the files with a file manager</p> <p>EDrive has a public and a private part, which are two different files and which:</p> <ul> <li> <p>allows a clair link in the public part ( for MailChimp, for documents and images, files and to share a file to a person who is not a CRM user)</p> </li> <li> <p>in other cases the files have an url which will only be valid during the connection</p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#see-all-the-events-on-ones-edrive","title":"See all the events on one's EDrive","text":"<ol> <li>to this end go to one's personal space</li> </ol> <ol> <li>click on the tab EDrive</li> </ol> <ol> <li>Or one can also access as following:</li> </ol> <p>By default, every user has a public file ( key for Mailchimp).</p> <p>This file can be use to add images or documents to one's mail campaigns.</p>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#add-a-file-to-ones-edrive","title":"Add a file to one's EDrive","text":"<ol> <li> <p>to this end click on the icon </p> </li> <li> <p>A dialog box will open </p> </li> <li> <p>One will be able to download the files on the server in one's personal space</p> </li> <li> <p>Choose the files </p> </li> <li> <p>they are displayed </p> </li> <li> <p>Then they will be on the server </p> </li> </ol> <p>Notes</p> <p>The public file is used here:</p>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#display-the-file-content","title":"Display the file content","text":"<p>EDrive is a real drive, click on the line:</p> <ul> <li> <p>For a PDF file </p> </li> <li> <p>For an image file </p> </li> <li> <p>Then one will be able to preview the videos or mp3 files</p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#create-a-folder","title":"Create a folder","text":"<p>the steps are simple:</p> <ul> <li> <p>click on the button </p> </li> <li> <p>enter the name of the file wanted </p> </li> <li> <p>And it will be on display </p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#change-the-name-of-a-file","title":"Change the name of a file","text":"<ul> <li> <p>double click on the file's namer </p> </li> <li> <p>Enter the new name </p> </li> <li> <p>Click on \"enter\" </p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#move-a-file-in-a-folder","title":"Move a file in a folder","text":"<ul> <li> <p>Select the icon and move it in the wanted folder </p> </li> <li> <p>the drop is done </p> </li> <li> <p>To go to the wanted folder, double click on the icon of the folder </p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#come-up-from-a-folder","title":"Come up from a folder","text":"<p>click on the following icon:  </p>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#come-up-a-level-a-file-in-the-parent-folder","title":"Come up a level a file in the parent folder","text":"<p>Drag and drop the icon of the file or folder on </p> <p>The file or folder will come up in the parent folder</p>"},{"location":"user-guide/doc-person/doc-person-document-edrive/#delete-an-element","title":"delete an element","text":"<p>Two options:</p> <ul> <li> <p>Click on the element and drag and drop in the Recycle bin </p> </li> <li> <p>or one clicks on </p> </li> </ul> <p>To conclude, it is a complete file manager</p> <p>EDrive is also via Webdav, like NextCloud or OwnCloud .... EcclesiaCRM is also Cloud.</p>"},{"location":"user-guide/doc-person/doc-person-document-images-files/","title":"Images & Files","text":"<p>The EcclesiaCRM version 5.5.0 or higher allows to deal with the text zones in one's documents</p> <ul> <li>The drag and drop of images</li> <li>the box of image and link management are now integrated to EDrive</li> </ul> <p>To this end:</p>"},{"location":"user-guide/doc-person/doc-person-document-images-files/#create-or-edit-a-document","title":"Create or edit a document","text":"<ol> <li> <p>Open a document, CKEditor</p> <ul> <li>Go to a personal space</li> </ul> <p></p> </li> <li> <p>Add a document</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-images-files/#edition","title":"Edition","text":"<p>Click on the icon:</p> <p></p>"},{"location":"user-guide/doc-person/doc-person-document-images-files/#drag-and-drop-images","title":"Drag and drop images","text":"<p>Once the document is opened drag and drop the image in.</p> <p></p> <p>Here's the result:</p> <p></p> <p>The file is in Edrive if it is activate  (*)</p> <p></p> <p>Note one can update the drive with the button above</p>"},{"location":"user-guide/doc-person/doc-person-document-images-files/#drag-and-drop-the-files","title":"Drag and drop the files","text":"<p>Once the document is opened drag and drop the files in.</p> <p></p> <p>here's the result:</p> <p></p> <p>The file is in Edrive if it is activate  (*)</p> <p></p> <p>Note one can update the drive with the button above</p>"},{"location":"user-guide/doc-person/doc-person-document-images-files/#include-pictures-in-edrive","title":"Include Pictures in EDrive (*)","text":"<p>Select:</p> <p></p> <p>then click</p> <p></p> <p>choose a line:</p> <p></p> <p>And click on the icon</p> <p></p> <p>One can manage all the standard settings on CKEditor. The link is dependent on an API (**)</p> <p></p> <p>Here's the result:</p> <p></p>"},{"location":"user-guide/doc-person/doc-person-document-images-files/#include-files-in-edrive","title":"Include files in EDrive (*)","text":"<p>To this end select:</p> <p></p> <p>Then click</p> <p></p> <p>Choose the file in EDrive, the result will be and One can choose here the name of the link on the page. The link is dependent on an API (**)</p> <p></p> <p>here's the result:</p> <p></p> <p>Notes</p> <ul> <li>(*) To active the EDrive, go to \"Manual Administrator\" -&gt; \"Rights &amp; CRM users managements\" -&gt; \"User role\"</li> </ul> <p>Then edit the user and add the role</p> <ul> <li>(**) The link to the document are via an API, except if the document is in the public folder</li> </ul> <p>In this case, the links are clear ( useful for Mailchimp or to share a document to someone who is not a CRM user)</p>"},{"location":"user-guide/doc-person/doc-person-document-share/","title":"Sharing","text":"<p>A user can share their documents with all the other users</p>"},{"location":"user-guide/doc-person/doc-person-document-share/#share-a-document","title":"Share a document","text":"<ol> <li> <p>Go to personal settings</p> <p></p> </li> <li> <p>Go to the tab \"document\"</p> <p></p> </li> <li> <p>Choose the following icon</p> <p></p> </li> <li> <p>The following window will open</p> <p></p> </li> <li> <p>Choose the name of:</p> <ul> <li>a person</li> <li>a family</li> <li>a group</li> </ul> <p>a document is shared when the icon has turned green</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-share/#modify-the-sharing-or-the-rights","title":"Modify the sharing or the rights","text":"<p>Click again on the following icon</p> <p></p> <p>It is possible to fix the rights for each of the person that have access to the shared documents</p> <p></p>"},{"location":"user-guide/doc-person/doc-person-document-share/#note","title":"Note","text":"<p>With the dialog box, it is possible to delete:</p> <ul> <li>users having access to the shared documents</li> <li>or the sharing itself via the same steps</li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-templates/","title":"Documents & Templates","text":"<p>It is possible with the EcclesiaCRM version 4.1 and higher to manage the documents templates.</p>"},{"location":"user-guide/doc-person/doc-person-document-templates/#creation","title":"Creation","text":"<ol> <li> <p>Go to a document, CKEditor</p> <ul> <li> <p>To this end, go to personal space</p> <p></p> </li> </ul> </li> <li> <p>Add a document</p> <p></p> </li> <li> <p>The first three icons of the list are for the templates management</p> <p></p> </li> <li> <p>Create it</p> <ul> <li>Format a document as one wishes</li> <li>Then one can add it to the list of templates</li> <li> <p>Click on the icon</p> <p></p> </li> <li> <p>Give a name and a description to the template</p> <p> 5. Profile management</p> </li> <li> <p>When a profile is created, it is possible to rename it or delete it</p> <p></p> </li> <li> <p>one can delete and rename it easily:</p> <p></p> </li> </ul> </li> <li> <p>Application</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-templates/#notes","title":"Notes","text":"<ul> <li>One can do the same with the shared and group calendars</li> <li>A group calendar can only be add by an administrator</li> <li>Templates are useful with MailChimp and for the mailing campaigns.</li> </ul>"},{"location":"user-guide/doc-person/doc-person-document-word-export/","title":"Export to Word (BETA)","text":"<p>It is possible with the EcclesiaCRM version 5.1.0 or higher to export the documents in word format in EDrive.</p>"},{"location":"user-guide/doc-person/doc-person-document-word-export/#export-an-existing-document","title":"Export an existing document","text":"<ol> <li> <p>Go to the document space and click on the word icon:</p> <p></p> </li> <li> <p>One will be asked to confirm</p> <p></p> </li> <li> <p>One can store the document under name chosen by default</p> <p>If one has no issue in the process, a confirmation will be send</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-word-export/#editing-a-document","title":"Editing a document","text":"<ol> <li> <p>Go to the document space and click on the word icon:</p> <p></p> </li> <li> <p>Here one will be able to name the document</p> <p></p> </li> <li> <p>If one has no issue in the process, a confirmation will be send</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-document-word-export/#here-is-the-result-in-edrive","title":"Here is the result in EDrive","text":""},{"location":"user-guide/doc-person/doc-person-document-word-export/#heres-the-result-when-one-opens-it-in-word","title":"here's the result when one opens it in Word","text":"<p>To export the document</p> <p></p> <p>Here's the result in Word</p> <p></p> <p>Note This function is at the Beta stage</p>"},{"location":"user-guide/doc-person/doc-person-events/","title":"Create an event","text":"<p>One can create different events: a group, a person or a shared event.</p>"},{"location":"user-guide/doc-person/doc-person-events/#create-an-event","title":"Create an event","text":"<ol> <li> <p>Go to \"calendar\"</p> <p></p> <ul> <li> <p>Click on the calendar area desired:</p> <p></p> </li> <li> <p>And one can enter the event as following:</p> <p></p> </li> <li> <p>Do not forget to choose a calendar</p> </li> <li>It is possible to change the date and make the event recurring</li> <li> <p>To this end, click on the date and it will open:</p> <p></p> </li> <li> <p>Then one can custom the event</p> </li> <li>add text</li> </ul> <p></p> </li> <li> <p>Or go to \"list Church Events\"</p> <p></p> <ul> <li>The above-mentioned steps are the same</li> </ul> </li> <li> <p>Activate a document</p> <ul> <li>A document can be made active or inactive</li> </ul> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-events/#notes","title":"Notes","text":"<ul> <li>One can now add participants to the events</li> <li>They can be add to a reminder</li> <li>an inactive event will not appear in the calendar and will be displayed only in the events list; therefore it is possible to prepare events ahead of time and activate them progressively.</li> </ul>"},{"location":"user-guide/doc-person/doc-person-profile/","title":"Home","text":"<p>A user has a personal space where one can store their documents</p> <ol> <li>To have access:</li> </ol> <p></p> <ol> <li>Personal space:</li> </ol> <p></p> <ol> <li>They can modify:</li> <li>the documents</li> <li>their profile</li> <li>their family</li> <li>etc ....</li> </ol>"},{"location":"user-guide/doc-person/doc-person-settings/","title":"Settings","text":"<p>A user has the following rights, granted by the administrator</p> <ol> <li>Modify the personal settings</li> </ol> <p></p> <ol> <li>Modify the following settings</li> </ol> <p></p> <p>Note : Depending on one's administrator, one will not always have access to all these settings:</p> <ul> <li>bEmailMailto : User's permission to send them emails via Mailto's links.</li> <li>sMailtoDelimiter : User's permission to send them emails via Mailto's links.</li> <li>bShowTooltip : Permission to display the tool tips</li> <li>sCSVExportDelemiter : to export in another text coding</li> <li>sCSVExportCharset : by default UFT-8 for european coding; use Windows-1252 for french coding.</li> <li>bSidebarExpandOnHover : The sidebar opens by default at the skimming of the mouse.</li> <li>bSidebarCollapse : The sidebar is closed by default</li> <li>sMapExternalProvider : when one will want to see a person's address on a map on their phone, they will be able to choose the type of map (Apple Maps, GoogleMaps, BingMaps).</li> <li>sStyle : one can choose the topic style</li> </ul> <p>They will be chosen by the CRM administrator</p>"},{"location":"user-guide/doc-person/doc-person-share-calendar/","title":"Share your calendar","text":"<p>A user can create personal calendars and open them on his phone and share it to other users.</p>"},{"location":"user-guide/doc-person/doc-person-share-calendar/#share-a-calendar","title":"Share a calendar","text":"<ol> <li> <p>Go to the management part (the [ i ] icon next to the calendar)</p> <p></p> </li> <li> <p>click on \"Manage\"</p> <p></p> </li> <li> <p>Here's the result</p> <p></p> </li> <li> <p>In the text field add a person, a family or a group</p> </li> <li> <p>One can choose the options Reading/Writing</p> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-share-calendar/#notes","title":"Notes","text":"<ul> <li>the steps are the same for the shared and group calendars</li> <li>a group calendar can only be add by an administrator</li> </ul>"},{"location":"user-guide/doc-person/doc-person-share-mac/","title":"Share with a Mac","text":"<p>A calendar can be shared with a Mac, an iPhone or Thunderbird.</p> <p>EcclesiaCRM is compatible CalDAV</p>"},{"location":"user-guide/doc-person/doc-person-share-mac/#share-a-calendar-on-a-mac","title":"Share a calendar on a Mac","text":"<ol> <li> <p>Open Calendar on a Mac and add a new one</p> <p></p> </li> <li> <p>The features are the following, one will have to enter the user's login in EcclesiaCRM</p> <p></p> </li> <li> <p>Here's the result</p> <p></p> <ul> <li>One will be able to add events, if the calendar is accessible in writing.</li> <li>Everything will be pass on a Mac</li> </ul> </li> </ol>"},{"location":"user-guide/doc-person/doc-person-share-mac/#share-a-calendar-in-ios","title":"Share a calendar in IOS","text":"<p>The steps are the same as on a Mac</p> <p>Enter the url in the form: http://192.168.151.205/calendarserver.php/principals/plogel2/</p>"},{"location":"user-guide/doc-person/doc-person-share-mac/#share-in-thunderbird-share-in","title":"Share in Thunderbird Share in","text":"<ul> <li> <p>One has to have the calendar's address</p> <p></p> </li> <li> <p>then select the address and enter it in Thunderbird.</p> </li> <li> <p>However it has to be done for every calendar</p> </li> </ul>"},{"location":"user-guide/doc-person/doc-person-share-mac/#for-outlook-one-needs-a-synchronizer-as-in-zimbra","title":"For Outlook one needs a synchronizer (as in Zimbra)","text":"<p>You can download it here:</p> <p><code>https://sourceforge.net/projects/outlookcaldavsynchronizer/</code></p>"},{"location":"user-guide/doc-person/doc-person-share-mac/#notes","title":"Notes","text":"<ul> <li>the steps are the same for the shared and group calendars</li> <li>a group calendar can only be add by an administrator</li> </ul>"},{"location":"user-guide/doc-person/doc-tips/doc-export-CSV/","title":"Export problem (CSV)","text":"<p>One can have coding and separator problems in the case of a CVS export. It could occur when exporting a dictionary, the SundaySchool classes or when one will export some data in table form.</p> <p>Excel or LibreOffice for example, may have problems to open the exported document.</p> <p>Resolve the problem:</p> <ol> <li> <p>Go to personal settings</p> <p></p> </li> <li> <p>Change the following settings</p> <p></p> </li> </ol> <p>Then set them as following:</p> <ul> <li>bSidebarExpandOnHover : The sidebar opens by default at the skimming of the mouse.</li> <li>bSidebarCollapse : The sidebar is closed by default</li> <li>the interface color...</li> </ul> <p>The problem should now be solved.</p>"},{"location":"user-guide/doc-person/doc-tips/doc-export-export-address-smartphone/","title":"View your addresses through AppleMap, GoogleMap","text":"<p>It could happen that when one clicks on an address they would want the address in <code>AppleMap</code> instead of <code>GoogleMap</code>, it may be useful :</p> <ul> <li>in Android : GoogleMap</li> <li>in iPhone  : AppleMap</li> </ul> <p>To deal with the problem</p> <ol> <li> <p>Go to personal settings</p> <p></p> </li> <li> <p>Change the following settings</p> <p></p> </li> </ol> <p>Then set them as following:</p> <ul> <li>sMapExternalProvider : When one will want to see an address on a map on their smartphone they will be able to choose the type of map (Apple Maps, GoogleMaps, BingMaps).</li> </ul> <p>The problem should now be solved.</p>"},{"location":"user-guide/doc-person/doc-tips/doc-export-sidebar/","title":"Menu bar","text":"<p>The menu bar can be closed or opened at the skimming of the mouse.</p> <ul> <li>On an iPad it may be useful to have the menu bar closed</li> <li>On a computer it can be opened</li> </ul> <p>To deal with the problem</p> <ol> <li> <p>Go to personal settings</p> <p></p> </li> <li> <p>Change the following settings</p> <p></p> </li> </ol> <p>Then set them as following:</p> <ul> <li>sCSVExportDelemiter :In Europe one would rather choose: <code>;</code> Elsewhere rather: <code>,</code>.</li> <li>sCSVExportCharset : By default in <code>UTF-8</code>, For the european coding use: <code>Windows-1252</code> For the coding in french.</li> </ul> <p>The problem should now be solved.</p>"},{"location":"user-guide/doc-plugins/installation-upgrade/","title":"Implementation","text":"<p>With the new version 8.0 of EcclesiaCRM, a new component in the administrator management is now available to you</p> <p>To do so, you must have administrator rights</p> <ul> <li>go to the settings section on the top right</li> </ul> <p></p> <ul> <li>You will have here the view to manage the plugins</li> </ul> <p></p> <p>It is quite similar in its management to Wordpress.</p> <ul> <li>It is possible to add a plugin</li> </ul> <p>Screenshot](../../img/plugins/plugins-management-add.png)</p> <p>Warning this plugin must be validated at the level of a digital signature to be integrated into EcclesiaCRM.</p> <ul> <li>It is possible to activate or deactivate a plugin as a group or plugin by plugin.</li> </ul> <p></p> <ul> <li>the update is under development and will come in a future version of EcclesiaCRM.</li> </ul>"},{"location":"user-guide/doc-plugins/installation-upgrade/#user-rights-management","title":"User rights management","text":"<p>Not all users have the right to access the plugin or want to access it.</p> <p>To do so: - Go to the settings for the users part</p> <p>Screenshot](../../img/plugins/plugins-management-users.png)</p> <ul> <li> <p>We choose a user   </p> </li> <li> <p>We get the new 8.0 management of EcclesiaCRM</p> </li> </ul> <p>Screenshot](../../img/plugins/plugins-management-users2.png)</p> <p>You have to click the tab on the right: \"Plugin permissions\".</p> <ul> <li>We just have to activate or assign the rights :</li> </ul> <p></p>"},{"location":"user-guide/doc-plugins/introduction/","title":"Overview","text":"<p>With version 8.0.0, plugin management is now available. They will allow you to extend the management of EcclesiaCRM, making it an even more polymorphic and powerful tool.</p>"},{"location":"user-guide/doc-plugins/introduction/#introduction","title":"Introduction","text":"<p>It is possible for a developer to add the functionality he is missing:</p> <ul> <li>the management of videoconferences via Jitsi is now done via a plugin</li> <li>it is possible by contacting the EcclesiaCRM team to manage event flows, see the documentation for that</li> <li>other plugins will be released later.</li> </ul>"},{"location":"user-guide/doc-plugins/introduction/#management","title":"Management","text":"<ul> <li>Plugins can be activated/deactivated and deleted.</li> <li>a plugin is built on strong rights that a user can have or not</li> </ul> <p>Warning plugins must be validated by the development team, a signature on each plugin guarantees the security and validation of the tool.</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/","title":"Create/Manaage (one day)","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#create-an-event-stream-one-day","title":"Create an event stream (one day)","text":"<ul> <li> <p>it will allow you to create a container in which you can</p> <ul> <li>put, your complete management of an event</li> <li>to put the volunteers</li> <li>send emails to warn them</li> </ul> </li> <li> <p>To create an event, go to the menu :</p> </li> </ul> <p></p> <ul> <li>Then use the button: \"Create an event flow\".</li> </ul> <p></p> <ul> <li>We obtain the following window and then we can set the following window:</li> </ul> <p></p> <p>This is a calendar flow, so it will be found in the calendar view. You have to fill in :</p> <pre><code>- the name of the flow\n- the calendar (don't forget to share it with the other people using it, see the help on calendars in the user manual)\n- the date and time is not a problem\n</code></pre> <p>You validate and the event is created both in the calendar and in the event flow management view.</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#builder-mode-event-flow","title":"Builder mode: event flow","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#actions","title":"Actions","text":"<p>The following toolbar will allow you to manage your flow completely</p> <p>Screenshot](../../../img/plugins/eventworkflow/eventworkflow3.png)</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#builder-mode-screenshot","title":"Builder mode ! Screenshot","text":"<p>Click on this button, if not already done, by default it is active.</p> <p>It will allow you to build your event flow completely: - title - container - sub-container by managing your volunteer opportunities.</p> <p>In each event flow, you can create a container, it can contain :</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#we-can-create-a-basic-title","title":"We can create a basic title","text":"<p>This is a trick to simulate titles</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#we-can-then-create-a-sub-container","title":"We can then create a sub-container","text":"<p>We transform this title into a block of containers of volunteer opportunities.</p> <p></p> <p>Here is the resulting view</p> <p></p> <ul> <li>You can choose the volunteer opportunities</li> <li>the time (this is a guideline between two sub-containers)</li> <li>the objective: the number of volunteers to be reached</li> </ul>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#you-can-then-add-as-many-sub-containers-as-you-want","title":"You can then add as many sub-containers as you want:","text":"<ul> <li>notes on the left</li> <li>sub-containers (doodles on the right, you can put as many as you want).   The doodles :<ul> <li>will allow you to check off the people</li> </ul> </li> </ul>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#action-in-a-sub-container","title":"Action in a sub-container","text":"<p>Screenshot](../../../img/plugins/eventworkflow/eventworkflow11.png)</p> <p>you can add</p> <ul> <li>members</li> <li>create a useful note further on</li> <li>send a mail</li> <li>Or delete the subcontainer</li> </ul>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#edit-mode","title":"Edit mode","text":"<p>You will be able to re-edit the event</p> <p>Screenshot](../../img/plugins/eventworkflow/eventworkflow13.png)</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#send-mail-screenshot","title":"Send mail ! Screenshot","text":"<p>Sending mail, will send a mail to all volunteers that have been checked and will open your personal email with the summary of the flow.</p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#duplicate-the-flow-screenshot","title":"Duplicate the flow ! Screenshot","text":"<p>This part allows you to duplicate the flow identically (volunteers are obviously unchecked)</p> <p></p>"},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#the-last-button-allows-to-delete-a-flow","title":"The last button allows to delete a flow","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#event-flow-timeline-volunteers","title":"Event flow timeline (volunteers)","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#worship-plan-for-volunteers","title":"Worship plan for volunteers","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#event-flow-timeline-volunteers_1","title":"Event flow timeline (volunteers)","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#worship-plan-for-volunteers_1","title":"Worship plan for volunteers","text":""},{"location":"user-guide/doc-plugins/eventworkflow/createmanage/#create-an-event-flow-several-days","title":"Create an event flow (several days)","text":"<p>The principle is the same as for one day.</p>"},{"location":"user-guide/doc-plugins/eventworkflow/introduction/","title":"Overview","text":""},{"location":"user-guide/doc-plugins/eventworkflow/introduction/#prerequisites","title":"Prerequisites","text":"<ul> <li>The event flow manager is a plugin in EcclesiaCRM version 8.0.</li> <li>it requires a calendar (personal, group, material or shared), see the user manual and the calendar section.</li> <li>only a user with the right to use the plugin can use it.</li> <li>the notion of event flow is built on the volunteer opportunities (example below : Home, Leader etc ...)   See for that the associated section : volunteer opportunities.</li> </ul>"},{"location":"user-guide/doc-plugins/eventworkflow/introduction/#presentation","title":"Presentation","text":"<p>The plugin \"Event flow\" allows you to manage the schedules of volunteers via a very specific event:</p> <ul> <li>for Sunday morning</li> <li>for rehearsals</li> </ul> <p>there are two types of event flow : - daily - over several days.</p> <p>It will allow you to manage your members via mini doodle</p> <p></p> <ul> <li>On the left the graph that will allow to visualize the occupation of the number of members who are present and absent</li> <li>on the right the members to be checked</li> <li>it is possible to create titles in red, for example \"Welcome (9:45)</li> <li>containers** : \"Welcome group<ul> <li>In this container, sub-containers (examples: low battery) which are nothing else than mini doodle (sub-container), or member or administrator will be able to check the present or absent<ul> <li>to manage the objectives to reach (1/2)</li> <li>to send emails to the doodle</li> </ul> </li> </ul> </li> <li>it will be possible to duplicate a flow to be able to reuse the work already produced from one Sunday to another.</li> </ul>"},{"location":"user-guide/doc-plugins/eventworkflow/introduction/#sending-emails","title":"Sending emails","text":"<p>It is possible to send an email to any member :</p> <ul> <li>of the event stream</li> <li>of each container</li> <li>of each sub-container (Doodle)</li> <li>of each member</li> </ul>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/","title":"Create - Edit - Sort","text":"<p>In a SundaySchool group, one can: - add members (students or teachers) - do CVS extractions, make a group photo - make a list of participants - etc ...</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#create-a-group","title":"Create a group","text":"<p>In the sidebar: menu bar -&gt; SundaySchool -&gt; dashboard</p> <p></p> <p>Then check \"bEnabledSundaySchool\" \"true\":</p> <p></p> <p>Enter the name of the group</p> <p></p> <p>The new view on display will be the new group:</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#add-teachers","title":"Add teachers","text":"<p>Go to menu</p> <p></p> <p>Enter a name</p> <p></p> <p>Validate, and the teacher chosen apparate on the screen</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#delete-a-teacher","title":"Delete a teacher","text":"<p>The steps are the following:</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#add-students","title":"Add students","text":"<p>Go to the bottom of the page</p> <p></p> <p>As for the teachers</p> <p></p> <p>Validate</p> <p></p> <p>Note : there are statistics automatically on display</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#delete-a-student","title":"Delete a student","text":""},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#list-by-gender-and-age-the-students","title":"List by gender and age the students","text":"<p>Click on the graphs - by months - by gender</p> <p>here's an example</p> <p></p> <p>Cancel the listing</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-add-edit/#extract-the-data","title":"Extract the data","text":"<p>One can easily extract a member if a group with the following buttons:</p> <p>Note : the administrator has to have given the legal rights to do extractions (GDPR)</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-attendance/","title":"Call the Register","text":"<p>For a SundaySchool group, one can call the register</p> <p>Note : every user can call the register as long as they are a teacher in this group</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-attendance/#call-the-register","title":"Call the register","text":"<p>It can be done by different ways, the easiest is :</p> <ol> <li> <p>Choose the group</p> <p></p> </li> <li> <p>then activate</p> <p></p> </li> <li> <p>One can now create the event \"call the register\"</p> <p></p> </li> <li> <p>And is now able to do it</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-attendance/#qr-code-call","title":"QR code Call","text":"<p>You choose see this window</p> <p></p> <p>If you prepare QR Code badges for your group, you can use the badge like this, or with a smartphone</p> <p></p> <p>And ... it's done</p> <p></p> <p>Lastly:</p> <ul> <li> <p>Select or deselect all the boxes</p> <p></p> </li> <li> <p>Then select in the \"Validate Attendance\", at the bottom of the page</p> <p></p> </li> </ul> <p>Note : one can take some notes in the text section, and drag and drop images and files</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-attendance/#export-the-group-in-cvs-or-pdf","title":"Export the group in CVS or PDF","text":"<p>Choose the group</p> <p></p> <p>This view will be on display</p> <p></p> <p>Click on one or the other button</p> <p></p> <p>The history of the attendance lists from the last few months will be on display</p> <p>Note : the export of the lists will be done automatically with the attendance statistics</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-badges/","title":"Export : Bagdes & QR codes","text":"<p>Note : the PDF and CVS exports are only possible if the administrator gives permission</p> <p>Choose a SundaySchool group</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-badges/#create-badges","title":"Create Badges","text":"<p>Click on the button \"Student Badges\"</p> <p></p> <p>the view on display will be:</p> <p></p> <p>choose amongst the options:</p> <ul> <li>the name of the SundaySchool</li> <li> <p>The background and title color</p> <p></p> </li> <li> <p>Choose an image and place it:</p> <ul> <li>on the left</li> <li>on the light</li> <li>in the middle</li> </ul> </li> <li> <p>to select a background image, click on its title</p> <p></p> </li> <li> <p>to delete it, click on the red X</p> <p></p> </li> <li> <p>Type of badges</p> <p></p> </li> </ul>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-badges/#create-qr-codes","title":"Create QR codes","text":"<pre><code>![Screenshot](../../img/sundayschool/sundayschoolBadge7.png)\n</code></pre> <ul> <li>click on the button \"Generate Badges\".</li> </ul>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-badges/#results","title":"Results","text":"<ul> <li> <p>Here's the result with an image on the left:</p> <p></p> </li> <li> <p>With QR Codes</p> <p></p> </li> </ul> <p>Note :the printer should be on \"borderless\" mode.</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-exports/","title":"Export : List - PhotoBook - Attendance","text":"<p>You can create - group photos - attendance lists - group lists</p> <p>Note :  It is only possible if the administrator gives the permission to do PDF and CVS export.</p> <p>##To create extractions</p> <p>Go to the menu \"Sunday School\" -&gt; \"Dashboard\"</p> <p></p> <p>Then choose</p> <p></p> <p>Then select one or several groups</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-exports/#to-do-a-group-photo","title":"To do a group photo","text":"<p>Click on the red button \"PhotoBook\"</p> <p></p> <p>The group photo will provide with the students and teachers</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-exports/#the-group-lists","title":"The group lists","text":"<p>Click on the button ad'hoc</p> <p>Note : it will provide the list of students to split between the teachers ( it can also provide some students' allergies and if they do not want to be photographed)</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-exports/#attendance-sheet","title":"Attendance Sheet","text":"<ul> <li> <p>select a group</p> <p></p> </li> <li> <p>the click Attendance Sheet</p> <p></p> </li> </ul> <p>There are two kinds :</p> <ul> <li>The attendance list to complete by hand and that does not take into account the database</li> <li>The attendance list which allows an extraction because it takes into account the database made during the year. For this list, go to \"call the register\"</li> </ul> <p>Note : One can add a student allergies or if they do not want to be photographed</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-help-teacher/","title":"Help Teacher","text":"<p>It is possible to list the SundaySchool group in the sidebar</p> <p>Note : one may want to distinguish the teachers from the teachers' assistants</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-help-teacher/#create-a-specific-attribute-for-sundayschool-assistant","title":"Create a specific attribute for SundaySchool: \"assistant\"","text":"<p>The steps are the same as if one add an attribute to a group, because a Sundayschool group is the same as any other group</p> <p>One has to go to the said SundaySchool group and edit it:</p> <p></p> <p>Activate the attributes:</p> <p></p> <p>One can now add:</p> <p></p> <p>And create the attribute \"assistance\":</p> <p></p> <p>Confirm with the button \"Add a new Field\"</p> <p></p> <p>IMPORTANT : one can now tick the box \"Show in person profile\"</p> <p></p> <p>Note : the specific attributes of a group are of two kinds \u2022 global ( for a manager to be able to send informations to the group) \u2022 by user (to have statistics), or in this case to create a teacher's assistant</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-help-teacher/#add-an-attribute-to-a-teacher","title":"Add an attribute to a teacher","text":"<p>Select the teacher's Sundayschool group</p> <p></p> <p>Select their profile</p> <p></p> <p>Go to the part \"group\"</p> <p></p> <p>And change the attributes</p> <p></p> <p>This view will be on display:</p> <p></p> <p>Check \"yes\"</p> <p></p> <p>And save the changes</p> <p></p> <p>Then display the changes on the profile</p> <p></p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-help-teacher/#in-the-case-of-exports","title":"In the case of exports","text":"<p>Here's the result in export:</p> <ul> <li>Group photo:</li> </ul> <p></p> <ul> <li>The teachers and students lists</li> </ul> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-introduction/","title":"Overview","text":"<p>The SundaySchool management is completely functional</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-introduction/#activate-the-feature-sundayschool","title":"Activate the feature: SundaySchool","text":"<p>Go to \"Edit General Settings\" -&gt; \"Enabled Features\"</p> <p></p> <p>Then check \"bEnabledSundaySchool\" to \"true\":</p> <p></p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-introduction/#functions","title":"Functions:","text":"<p>Here are the options of EcclesiaCRM for the SundaySchool:</p> <ul> <li>By default, a teacher can call the register</li> <li>It is possible to export CSV</li> <li>Depending on the students present, one can make a list of who is at SundaySchool</li> <li>One can list the students by birth month, gender, ... which comes in handy for birthday dates.</li> <li>create badges</li> <li>group photo</li> <li>add attribute to the users (allergy,...) et can make custom lists</li> <li>etc ...</li> </ul>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-menu/","title":"Side bar","text":"<p>It is possible to sort Sundayschool groups in the sidebar by sunday group types.</p> <p>Note : it is only possible if the administrator allows it.</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-menu/#manage-the-lists","title":"Manage the lists","text":"<p>Go to the right sidebar to access the settings</p> <p></p> <p>The window of submenu and listing creation is now on display:</p> <p></p> <p>One can list them with the up-down arrows</p>"},{"location":"user-guide/doc-sunday-school/doc-sunday-school-menu/#assignment-of-a-sundayschool-group-to-a-submenu","title":"Assignment of a sundayschool group to a submenu","text":"<p>Go to the left sidebar and select an existing group which is already not assigned and select the group \"Test 2\":</p> <p></p> <p>Then edit the group</p> <p></p> <p>Here on can choose the submenu:</p> <p></p> <p>Then select and \"Save\" it</p> <p></p> <p>Here the result:</p> <p></p> <p>Note : Finally the sunday groups are now sorted in submenus.</p>"},{"location":"user-guide/doc-tools/doc-cart/","title":"Cart &amp; EcclesiaCRM","text":"<p>The cart contains temporarily the members that one added. One can add as many people as they want, and they can manage them by groups to send emails, or make a directory, badges or letters head.</p> <p>And is possible to fill the cart each times you see the plus cart icon like below</p> <p></p> <p>One can also assign the selected members to a group or to a family.</p> <p>Any member can be add to the cart and it will change nothing to the member's profile.</p> <p>The cart is only depending from the user and the current session, each user system has his own cart, which will be valid until disconnection.</p> <p>Note: the cart is a key tool of EcclesiaCRM, it allows to manage the group making, the extractions of some members as a CVS file, ...</p>"},{"location":"user-guide/doc-tools/doc-cart/#add-a-cart-role-to-a-user","title":"Add a cart role to a user","text":"<p>Via the board \"Manual: Administrator \u2192 rights and administration of the CRM users \u2192 Users profile management\"</p>"},{"location":"user-guide/doc-tools/doc-cart/#access-the-cart-content","title":"Access the cart content","text":"<p>the access to the cart is in the toolbar, it will show the number of items in the cart, which depends of the members added or deleted.</p> <p></p> <p>A context menu will appear by clicking on the cart which allows the user to see the content.</p>"},{"location":"user-guide/doc-tools/doc-cart/#add-members-to-the-cart","title":"Add members to the cart","text":"<p>There are different way to do it:</p> <ul> <li> <p>Add a single member:</p> <ol> <li>Go to the left sidebar and click on \"Peope &amp; Family\", and then \"Meta Search Engine\", one will get the members list where they'll be able to add one or several persons in the cart via the ad'hoc icon</li> <li>or enter the person's name in the search sidebar.<ul> <li>when the name can be seen the button \"add to cart\" will appear</li> <li>if the person is not already in the cart, they will be added.</li> </ul> </li> </ol> </li> <li> <p>Alternatively:</p> <ol> <li>Search for a member's profile and use the button \"add to cart\", the result will be the same as with the first method.</li> <li>Or one can add via the \"request menu\"</li> </ol> </li> </ul> <p>The button \"add to cart\" can be used for a single person and also for a group.</p> <p></p> <p>To this end, use \"Empty Cart to Group\", use \"Select an existing Group\".</p> <p></p>"},{"location":"user-guide/doc-tools/doc-cart/#delete-a-person-from-the-cart","title":"Delete a person from the cart","text":"<ol> <li>open the cart menu, then \"View Cart\", and the button \"Empty Cart\"</li> <li>At the bottom of the page, one can view the persons in the cart which allows them to delete one or several persons from the cart</li> </ol> <p>Note: To empty completely the cart click on the button \"empty cart\" at the top of the page, or in the menu. Warning: To empty completely the cart click on the button \"empty cart\" at the top of the page, or in the menu.</p>"},{"location":"user-guide/doc-tools/doc-email/","title":"Email &amp; EcclesiaCRM","text":"<p>To send emails via EcclesiaCRM</p> <p>To this end, the configuration email has to be made (\"administrator manuel\")</p>"},{"location":"user-guide/doc-tools/doc-email/#send-emails-via-ones-email-client-on-pc-or-mac-or-other-email-client-on-smartphone","title":"Send emails via one's email client on PC or Mac or other email client on Smartphone","text":"<ol> <li> <p>Add the members of a group or of a sunday group or via a profile from a person family ...</p> <p></p> <p>this is the result</p> <p></p> </li> <li> <p>Then go to \"Cart \u2192 View Cart\"</p> <p></p> </li> <li> <p>Click on \"send an email to the cart\"</p> <p></p> </li> <li> <p>The emails will be sent via one's email client</p> </li> </ol>"},{"location":"user-guide/doc-tools/doc-email/#email-via-mailchimp","title":"Email via Mailchimp","text":"<p>See the manuel \"Email \u2192 MailChimp\"</p>"},{"location":"user-guide/doc-tools/doc-geographics/","title":"Geographical search &amp; EcclesiaCRM","text":"<p>EcclesiaCRM has a map option which allows to see the members, via GoogleMap, OpenStreetMap or BingMap.</p> <p>An event can also be located on a map (example: to give an appointment to a group)</p>"},{"location":"user-guide/doc-tools/doc-geographics/#how-does-ecclesiacrm-locate-a-person-on-the-map","title":"How does EcclesiaCRM locate a person on the map ?","text":"<p>EcclesiaCRM stores the GPS data to be able to situate the members on the map, the data are provided via rpc.geocoder.us. or nominatim.openstreetmap.org by using the members' address stored in the CRM. If you know an other localisation service, you are welcomed to contact us.</p>"},{"location":"user-guide/doc-tools/doc-geographics/#how-does-one-search-for-persons-around-another-person","title":"How does one search for persons around another person ?","text":"<p>To this end, go to the menu \"individual and Family\", then \"dashboard\", and \"geographic family\", one selects the name of a family, the maximum number of neighbors, the radius around the family and then validate.</p> <p>One is able to put the results in the \"cart\", see the bottom of the results page.</p>"},{"location":"user-guide/doc-tools/doc-geographics/#where-can-one-see-the-families-on-the-map","title":"Where can one see the families on the map?","text":"<p>To this end, go to the menu \"individual and family\" and choose the item \"see on the map\"</p> <p>Via the map legend, one will be able to display or not the persons depending on their assigned role.</p> <p>Note lThe main role is usually the \"family representative\", to avoid having too 10 pins on the map for a single family of 10 members.</p>"},{"location":"user-guide/doc-tools/doc-geographics/#is-there-any-other-map-format","title":"Is there any other map format ?","text":"<p>The page \"geographic family\" allows the making of files with data readable by other tools; go to \"data files\" and click on the + to see the different options.</p>"},{"location":"user-guide/doc-tools/doc-import/","title":"Import Datas &amp; EcclesiaCRM","text":"<p>One can import data via a CVS file with a separator  \",\" ou \";\". Each line of the file has to contain a person's data.</p> <p>The function \" import a CVS file\" is in the administrator menu.</p> <p></p> <p>Here one will find the manuel to import the data file automatically; the families can be form automatically in the file by means of the members' gender and the reunification is made according to the address. Here are the basic informations:</p> <ul> <li>Title (for the family's creation)</li> <li>First name</li> <li>Middle name</li> <li>last name</li> <li>suffix</li> <li>gender</li> <li>donations</li> <li>Address 1</li> <li>Address 2</li> <li>Town</li> <li>State</li> <li>postal Code</li> <li>Country</li> <li>Personal phone number</li> <li>Professional phone number</li> <li>Mobile phone number</li> <li>email</li> <li>Job</li> <li>Birth date</li> <li>accession date to the church</li> <li>wedding date</li> <li>personal fields for the person</li> <li>personal fields for the family</li> </ul> <p>the dates can be formated YYYY-MM-DD, MM-DD-YYYY, or DD-MM-YYYY.The date separators (-; /; ect) won't work</p>"},{"location":"user-guide/doc-tools/doc-import/#make-automatic-families","title":"Make automatic families","text":"<p>EcclesiaCRM can form families automatically, depending on :</p> <ul> <li>the same address which they share</li> <li>The data which are a part of the family personal fields.</li> </ul> <p>To this end, select the mode \"family creation\"</p>"},{"location":"user-guide/doc-tools/doc-import/#members-classification","title":"Members classification","text":"<p>It is possible to import the persons depending on their status (members, guests,...)</p> <p>*Note : Once the import had been concluded, all the members are automatically placed in the cart.</p>"},{"location":"user-guide/doc-users/doc-user-role/","title":"User role","text":""},{"location":"user-guide/doc-users/doc-user-role/#introduction","title":"Introduction","text":"<p>WARNING to create a user role, an user role has to be made in addition to the administrator.     By default, two roles are installed</p>"},{"location":"user-guide/doc-users/doc-user-role/#role-management","title":"Role management","text":"<ol> <li> <p>To access the role management:</p> <ul> <li> <p>Go to settings</p> <p></p> </li> <li> <p>Then \"user system\"</p> <p></p> </li> <li> <p>Now, one will be able to manage with the users</p> <p></p> </li> </ul> </li> </ol> <p>2.to modify one, click on the pen icon in the reference lign of a user</p> <p></p>"},{"location":"user-guide/doc-users/doc-user-role/#assign-a-role-to-a-user","title":"Assign a role to a user","text":"<p>Go to \"user system\", select a user</p> <ol> <li> <p>Once one did the steps as mentioned, the result will be:</p> <p></p> </li> <li> <p>One can use a default role:</p> <p></p> </li> <li> <p>The boxes shown here will be tick:</p> <p></p> </li> <li> <p>And finally store the new settings</p> </li> </ol>"},{"location":"user-guide/doc-users/doc-user-role/#create-a-role","title":"Create a role","text":"<p>Go to \"user system\", select a user</p> <ol> <li> <p>Tick all the boxes you need for the selected user</p> </li> <li> <p>Click on the button:</p> <p></p> </li> <li> <p>Associate a name:</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-users/doc-user-role/#change-the-name-or-delete-a-role","title":"Change the name or delete a role","text":"<p>Go to \"user system\", select a user</p> <ol> <li> <p>Select the following button:</p> <p></p> </li> <li> <p>Follow the steps:</p> <p></p> </li> </ol>"},{"location":"user-guide/doc-users/doc-users/","title":"User creation","text":"<p>A user has the following rights:</p> <ul> <li>manage their personal account</li> <li>access their record via WebDAV</li> <li>Add files to their personal account</li> <li>Create calendars</li> <li>Visit the shared calendars</li> <li>Share their calendars</li> </ul>"},{"location":"user-guide/doc-users/doc-users/#access-the-management","title":"Access the management","text":"<p>3.Manage the users</p> <ul> <li>Go to settings</li> </ul> <p></p> <ul> <li>Then \"user system\"</li> </ul> <p></p> <ul> <li>One can now create new accounts or manage them</li> </ul> <p></p> <ol> <li>To modify a user account</li> </ol> <p></p> <ol> <li>Create a user from a member</li> </ol> <p></p> <p></p>"},{"location":"user-guide/doc-users/doc-users/#change-the-properties","title":"Change the properties","text":"<ol> <li> <p>user's rights ( for a system administrator)</p> <ul> <li>they can manage the cart</li> <li>the storage (create members)</li> <li>modify member account</li> <li>See the Google Maps</li> <li>Administrator of the properties and classifications:</li> <li>Administrator of the groups and roles:</li> <li>Administrator of the finances management:</li> <li>See, add and modify documents:</li> <li>Modify their own account (only for their own family)</li> <li>Lobbyist</li> <li>Create the administrators</li> <li>Deal with the default colors of the CRM</li> </ul> </li> <li> <p>They can also establish the users' rights</p> <ul> <li>send emails</li> <li>manage the separator for the group mails</li> <li>create directories</li> <li>Export a cart content to a CVS format (in Excel ot LibreOffice Calc)</li> <li>display the tooltips</li> <li>Add events to a calendar</li> <li>See the private data</li> </ul> </li> </ol>"},{"location":"user-guide/doc-visio/doc-visio-introduction/","title":"Introduction","text":"<p>With EcclesiaCRM 7.0, it is possible to make meetings with Jitsi</p> <p></p> <p>It is possible to</p> <ul> <li>create rooms for your meetings</li> <li>work with other persons</li> <li>share files</li> <li>share your screen</li> <li>tchat with with your groups</li> </ul>"},{"location":"user-guide/doc-visio/doc-visio-management/","title":"Management","text":""},{"location":"user-guide/doc-visio/doc-visio-management/#create-a-meeting","title":"Create a meeting","text":"<p>Use the button below</p> <p></p> <p>You get this window, choose a name (avoid the spaces, underscore special char, etc ...)</p> <p></p> <p>Set now your name or nickname</p> <p></p> <p>And ... it is done</p> <p></p>"},{"location":"user-guide/doc-visio/doc-visio-management/#invite-other-people","title":"Invite other people","text":"<p>Click the blue button</p> <p></p> <ul> <li>copy the share meeting link</li> <li>and paste it to a mail</li> </ul> <p>It's done</p>"},{"location":"user-guide/doc-visio/doc-visio-management/#meetings-management","title":"Meetings management","text":"<p>Note : you can prepare several meetings and switch from one to another.</p> <p>To do this, use the arrow button</p> <p></p>"},{"location":"user-guide/doc-visio/doc-visio-management/#last","title":"Last","text":"<p>You can delete all your rooms or create an appointment in the calendar....</p>"},{"location":"user-guide/doc-webdav-file/doc-webdav-intro/","title":"Introduction","text":"<p>With the version 3.5.0 or higher, it is possible to access the members' files in EcclesiaCRM. It is possible to make a private folder for every member of the CRM in Windows Mac or Linux</p> <ul> <li> <p>Here is an account example: plogel on which one can access in Windows </p> </li> <li> <p>One can see the documents on the member's account: </p> </li> <li> <p>and also videos and audios </p> </li> <li> <p>A PDF file can be see as a whole in the CRM, without having to edit it : </p> </li> </ul> <p>That was an overview of the tool and how one can use it.</p>"},{"location":"user-guide/doc-webdav-file/doc-webdav-use/","title":"Using the file manager","text":""},{"location":"user-guide/doc-webdav-file/doc-webdav-use/#introduction","title":"Introduction","text":"<p>With the version 3.5.0 or higher one can manage the members' files in EcclesiaCRM.</p> <p>A member has to be tranform to a CRM user, to this end one has to go to the part \"CRM's Users management\"</p> <p>Once the new user is made one connect to the WebDAV server. WARNING* The website host has to be compatible with WebDAV.</p>"},{"location":"user-guide/doc-webdav-file/doc-webdav-use/#in-macos","title":"In MacOS","text":"<ul> <li>In Finder, select the following menu:</li> </ul> <ul> <li> <p>Choose \"connect to the server...\"</p> </li> <li> <p>Then enter the address in the form:  https://url_serveur/server.php/home/nom_utilisateur/</p> </li> </ul> <p></p> <ul> <li>Enter the user identifier:</li> </ul> <p></p> <ul> <li>A window will open on the share folder:</li> </ul> <p></p>"},{"location":"user-guide/doc-webdav-file/doc-webdav-use/#in-windows","title":"In Windows","text":"<ul> <li>In the file explorer right-clicked the network icon.</li> </ul> <ul> <li>Then enter the address in the form:  https://url_serveur/server.php/home/nom_utilisateur/</li> </ul> <ul> <li>Enter the user identifier, and tick the two boxes</li> </ul> <ul> <li>A window will open on the share folder:</li> </ul> <p>Now one will be allowed to add documents in this folder and they will be also on the user profile. A file add this way will have a clarification DAV</p> <p></p>"}]}